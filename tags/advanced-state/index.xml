<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced state on M X</title>
    <link>https://coderxdlee.github.io/tags/advanced-state/</link>
    <description>Recent content in Advanced state on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Mon, 29 Jul 2019 00:09:24 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/advanced-state/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.2_如何使用@ObjectBinding创建对象绑定</title>
      <link>https://coderxdlee.github.io/post/swiftui/4-advanced_state/4.2_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8objectbinding%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 29 Jul 2019 00:09:24 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/4-advanced_state/4.2_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8objectbinding%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-两件重要的事情&#34;&gt;1. 两件重要的事情&lt;/h3&gt;

&lt;p&gt;当使用对象绑定时，我们需要处理两个细微不同的东西:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BindableObject 协议，用于一些可以存储数据的类。&lt;/li&gt;
&lt;li&gt;@ObjectBinding 属性包装器，在视图中用于存储可绑定对象实例。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-示例&#34;&gt;2. 示例&lt;/h3&gt;

&lt;p&gt;举个例子，这是一个遵循 &lt;code&gt;BindableObject&lt;/code&gt; 协议的 &lt;code&gt;UserSettings&lt;/code&gt; 类:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Combine
import SwiftUI

class UserSettings: BindableObject {
    var didChange = PassthroughSubject&amp;lt;Void, Never&amp;gt;()
    
    var score = 0 {
        didSet {
            didChange.send(())
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码代码量很小，但是却包含了相当多的知识点，接下来我们逐一解释:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一: &lt;code&gt;didChange&lt;/code&gt;是 &lt;code&gt;PassthroughSubject&lt;/code&gt; 的一个实例。

&lt;ul&gt;
&lt;li&gt;这个类来自 &lt;code&gt;Combine&lt;/code&gt; 框架，我们需要添加 &lt;code&gt;import Combine&lt;/code&gt; 以使我们的代码能够编译。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;passthrough subject&lt;/em&gt; 的工作很简单: 每当我们想要告诉世界我们的对象发生了变化，我们就要求  &lt;em&gt;passthrough subject&lt;/em&gt; 为我们做这件事情。它被称为 &lt;em&gt;pass through&lt;/em&gt; ，因为我们传递给它的值实际上会传递给任何正在观察变化对象的视图。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PassthroughSubject&lt;/code&gt; 在技术上被称为 &lt;em&gt;publisher&lt;/em&gt; ，因为它对世界发布了变化的公告。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第二: &lt;code&gt;PassthroughSubject&lt;/code&gt; 是 &lt;code&gt;Void&lt;/code&gt; 和 &lt;code&gt;Never&lt;/code&gt; 的泛型。

&lt;ul&gt;
&lt;li&gt;第一个参数 &lt;code&gt;Void&lt;/code&gt; 意味着 &amp;ldquo;&lt;strong&gt;我不发送任何值&lt;/strong&gt;&amp;ldquo;。在 SwiftUI 的情况下，我们不需要发送值，因为我们想要的是视图刷新 - 它将自动从 &lt;code&gt;@ObjectBinding&lt;/code&gt; 状态中获取新数据。&lt;/li&gt;
&lt;li&gt;第二个参数 &lt;code&gt;Never&lt;/code&gt;，意味着 &amp;ldquo;&lt;strong&gt;我永远不会抛出错误&lt;/strong&gt;&amp;ldquo;。如果你想，你可以定义一个自定义的错误类型，如 &lt;code&gt;NetworkError&lt;/code&gt;，并将其发送，但是通常会发现在可绑定对象内部本地处理错误。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第三: 我们在 &lt;code&gt;UserSettings&lt;/code&gt; 的 &lt;em&gt;score&lt;/em&gt; 属性上附加了一个 &lt;code&gt;didSet&lt;/code&gt; 属性观察器，这样我们就可以在该值发生变化时运行代码。 在我们的示例代码中，每当得分发生变化时，我们都会调用 &lt;code&gt;didChange.send(())&lt;/code&gt;，这就是告诉 &lt;code&gt;didChange&lt;/code&gt; 发布者发布我们的数据已更改的消息，以便任何订阅的视图都可以刷新。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以在这样的视图中使用 &lt;code&gt;UserSettings&lt;/code&gt;类:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @ObjectBinding var settings = UserSettings()
    
    var body: some View {
        VStack {
            Text(&amp;quot;Your score is \(settings.score)&amp;quot;)
            Button(action: {
                self.settings.score += 1
            }) {
                Text(&amp;quot;Increase Score&amp;quot;)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正如你所看到的，除了使用带有 &lt;code&gt;@ObjectBinding&lt;/code&gt; 属性包装器的 &lt;em&gt;settings&lt;/em&gt; 之外，其他所有内容都或多或少看起来相同 - SwiftUI 负责处理我们的所有实现细节。
但是有一个重要区别: &lt;em&gt;settings&lt;/em&gt; 属性未声明为 &lt;code&gt;private&lt;/code&gt;。 这是因为绑定对象可以被多个视图使用，因此通常会公开共享它。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;警告: 当您使用 publisher 宣布您的对象已更改时，这必须在主线程上发生。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>4.1_@ObjectBinding、@State 和 @EnvironmentObject三者之间的区别</title>
      <link>https://coderxdlee.github.io/post/swiftui/4-advanced_state/4.1_objectbinding_state_environmentobject%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 28 Jul 2019 22:31:35 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/4-advanced_state/4.1_objectbinding_state_environmentobject%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-state&#34;&gt;1. &lt;code&gt;@State&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;在任何现代应用程序中，&lt;strong&gt;状态（State）&lt;/strong&gt;都是不可避免的。&lt;/p&gt;

&lt;p&gt;但是对于 SwiftUI 来说，重要的是要记住:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们所有的视图都只是它们的状态的函数&lt;/li&gt;
&lt;li&gt;我们不会直接改变视图，而是操纵状态并让它决定结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SwiftUI 为我们提供了几种在应用程序中存储状态的方法，但是它们之间略有不同，理解它们之间的区别对于正确使用框架是很重要的。&lt;/p&gt;

&lt;p&gt;到目前为止，在我们所有的状态示例中，我们都使用 &lt;code&gt;@State&lt;/code&gt; 来创建如下属性:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    @State var score = 0
    // more code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码在视图中创建了一个属性，但它使用 &lt;code&gt;@State&lt;/code&gt; 属性包装器（property wrapper）来请求 SwiftUI 来管理内存。这一点很重要: 我们所有的视图都是结构体（structs），这意味着它们不能被改变，如果我们不能在一场比赛中给一个分数加1，那么这就不是一场比赛了。&lt;/p&gt;

&lt;p&gt;因此，当我们使用 &lt;code&gt;@State&lt;/code&gt; 创建一个属性时，就意味着将该属性的控制权交给了 SwiftUI，这样的话，只要视图存在，它就在内存中保持不变。当该状态发生变化时，SwiftUI 知道用最新的变化自动重新加载视图，以便反映其新信息。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@State&lt;/code&gt; 对于属于特定视图且从未在该视图之外使用的简单属性非常有用，因此通常最好将这些属性标记为私有属性，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State private var score = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这再次强化了这样一种观点，即这种状态是专门设计的，永远不会脱离它的视图。简单理解，就是在视图内部使用的。&lt;/p&gt;

&lt;h3 id=&#34;2-objectbinding&#34;&gt;2. &lt;code&gt;@ObjectBinding&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;对于更复杂的属性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当你有一个要使用的自定义类型，该类型可能具有多个属性和方法&lt;/li&gt;
&lt;li&gt;可能在多个视图中共享时&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，你应该使用 &lt;code&gt;@ObjectBinding&lt;/code&gt;。
这与 &lt;code&gt;@State&lt;/code&gt; 非常相似，只是现在我们使用的是外部引用类型，而不是简单地本地属性，如字符串或整数。我们仍然可以说视图取决于要更改的数据，除了我们负责管理自己的数据: 我们需要创建类的实例，创建自己的属性，等等。&lt;/p&gt;

&lt;p&gt;与 &lt;code&gt;@ObjectBinding&lt;/code&gt; 一起使用的任何类型都应该遵循 &lt;code&gt;BindableObject&lt;/code&gt; 协议，该协议只有一个要求: 您的类型必须实现某种类型的 &lt;code&gt;didchange&lt;/code&gt; 属性，该属性在数据发生更改时通知视图。&lt;/p&gt;

&lt;p&gt;这就是我的意思，当我说这是你负责管理自己的数据时——当你在绑定对象上设置一个属性时，你就可以决定是否应该强制视图刷新。你通常会的，但不是必须的。&lt;/p&gt;

&lt;p&gt;一个可绑定的对象可以使用 &lt;code&gt;Combine&lt;/code&gt; 框架中 &lt;em&gt;publisher&lt;/em&gt;  通知其视图重要数据已经更改。如果碰巧有几个视图使用可绑定对象的数据，那么它将自动通知所有这些视图。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;警告:&lt;/strong&gt; 当你使用 &lt;em&gt;publisher&lt;/em&gt; 宣布你的对象已更改，这个动作必须在主线程上执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-environmentobject&#34;&gt;3. &lt;code&gt;@EnvironmentObject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;我们已经了解了如何通过 &lt;code&gt;@State&lt;/code&gt; 声明一个类型的简单属性，该类型数据在发生更改时自动导致视图更新，以及如何通过 &lt;code&gt;@Objectbinding&lt;/code&gt; 声明外部类型的属性，该属性在更改时可能会或可能不会导致视图更新。这两个都必须由我们的视图设置，但是 &lt;code&gt;@Objectbinding&lt;/code&gt; 可能与其他视图共享。&lt;/p&gt;

&lt;p&gt;针对这种情况，我们还有第三种类型的属性可供使用，即 &lt;code&gt;@EnvironmentObject&lt;/code&gt;。这是一个通过应用程序本身对视图可用的值 -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;它是每个视图都可以读取的共享数据，因此，如果你的应用程序有一些重要的模型数据，所有视图都需要读取，你可以把它从一个视图传递到另一个视图，或者把它放到每个视图都可以即时访问的环境中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当我们需要在应用程序中传递大量数据时，可以将 &lt;code&gt;@Environmentobject&lt;/code&gt; 视为一种极大的便利。由于所有视图都指向同一模型，因此如果一个视图更改模型，则所有视图都会立即更新 - 不会有使应用程序的不同部分不同的风险。&lt;/p&gt;

&lt;h3 id=&#34;4-总结差异&#34;&gt;4. 总结差异&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;将 &lt;code&gt;@State&lt;/code&gt; 用于属于单个视图的简单属性。 它们通常应标记为 &lt;code&gt;private&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;@ObjectBinding&lt;/code&gt; 用于可能属于多个视图的复杂属性。 无论何时使用引用类型，都应该使用&lt;code&gt;@ObjectBinding&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;@EnvironmentObject&lt;/code&gt; 用于在应用程序中其他位置创建的属性，例如共享数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这三种方法中，您会发现 &lt;code&gt;@objectbinding&lt;/code&gt; 是最有用和最常用的，因此如果您不确定要使用哪种方法，请从那里开始。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
