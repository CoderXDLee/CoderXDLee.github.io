<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alerts and action sheets on M X</title>
    <link>https://coderxdlee.github.io/tags/alerts-and-action-sheets/</link>
    <description>Recent content in Alerts and action sheets on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Mon, 05 Aug 2019 11:54:02 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/alerts-and-action-sheets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>8.1_使用presentations</title>
      <link>https://coderxdlee.github.io/post/swiftui/8-alerts_and_action_sheets/8.1_%E4%BD%BF%E7%94%A8presentations/</link>
      <pubDate>Mon, 05 Aug 2019 11:54:02 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/8-alerts_and_action_sheets/8.1_%E4%BD%BF%E7%94%A8presentations/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 的声明性编程方法意味着我们不会像在 UIKit 中那样创建和呈现 &lt;strong&gt;警报(Alerts)&lt;/strong&gt; 和 &lt;strong&gt;操作表(Action sheets)&lt;/strong&gt;。 相反，我们定义了它们应该什么条件下显示，告诉它它们应该是什么样子，然后让它自己计算出其余部分。&lt;/p&gt;

&lt;p&gt;这一切都是通过使用 &lt;code&gt;presentation()&lt;/code&gt; 修饰符来完成的，该修饰符将新 UI 附加到我们的视图中，当满足某个条件时将显示该 UI。我们可以根据需要附加任意多个，并且它们实际上会等待观察，直到它们的状态变为真(true)，这个时候，它们显示自己的 UI。例如: 我们可以在按下按钮时切换一个布尔值，这会触发要显示的警报(alerts)。&lt;/p&gt;

&lt;p&gt;我们可以将演示文稿附加到主视图或其任何子视图，甚至是可以调整状态的按钮，以便触发演示文稿。这是一个微妙的区别，但重要的是要理解，这些演示文稿并没有附加到按钮上，因为它是一个按钮，也就是说，由于点按了按钮，所以不会以任何方式显示警报(alerts)。相反，我们将它附加到我们的视图层次结构中，以便 SwiftUI 知道它可能在任何时候显示。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
