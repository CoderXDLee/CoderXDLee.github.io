<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animation on M X</title>
    <link>https://coderxdlee.github.io/tags/animation/</link>
    <description>Recent content in Animation on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Wed, 07 Aug 2019 15:14:58 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>11.7_如何创建非对称转换</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.7_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 07 Aug 2019 15:14:58 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.7_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 允许我们在添加视图时指定一个转换，在删除视图时指定另一个转换，所有转换都使用  &lt;code&gt;asymmetric()&lt;/code&gt; 转换类型完成。&lt;/p&gt;

&lt;p&gt;例如，我们可以创建一个使用非对称过渡的文本视图，以便在添加时从前缘移入，并在移除时向下移动到底边，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Details go here.&amp;quot;).transition(.asymmetric(insertion: .move(edge: .leading), removal: .move(edge: .bottom)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>11.6_如何组合transactions</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.6_%E5%A6%82%E4%BD%95%E7%BB%84%E5%90%88transactions/</link>
      <pubDate>Wed, 07 Aug 2019 09:43:38 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.6_%E5%A6%82%E4%BD%95%E7%BB%84%E5%90%88transactions/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;添加或删除视图时，SwiftUI 允许我们使用 &lt;code&gt;combined(with:)&lt;/code&gt; 方法组合 &lt;strong&gt;转换&lt;/strong&gt; 以创建新的动画样式。&lt;/p&gt;

&lt;p&gt;例如，我们可以同时将视图移动（一次转换）和淡入淡出（第二次转换），如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Details go here...&amp;quot;)
    .transition(AnyTransition.opacity.combined(with: .slide))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了使组合转换更易于使用和重用，我们可以在 &lt;code&gt;AnyTransition&lt;/code&gt; 上将它们创建为扩展，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension AnyTransition {
    static var moveAndScale: AnyTransition {
        AnyTransition.move(edge: .bottom).combined(with: .scale)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有了这个，我们现在可以使用以下内容添加或删除文本视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Details go here...&amp;quot;)
    .transition(.moveAndScale)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>11.5_如何添加和删除带有转换的视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.5_%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%B8%A6%E6%9C%89%E8%BD%AC%E6%8D%A2%E7%9A%84%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Tue, 06 Aug 2019 18:11:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.5_%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%B8%A6%E6%9C%89%E8%BD%AC%E6%8D%A2%E7%9A%84%E8%A7%86%E5%9B%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;p&gt;我们可以使用常规的 Swift 条件在设计中包含或排除某个视图。&lt;/p&gt;

&lt;h3 id=&#34;1-默认动画-fade&#34;&gt;1. 默认动画 - fade&lt;/h3&gt;

&lt;p&gt;例如，当点击按钮时，这会添加或删除一些详细信息文本:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var showDetails = false

    var body: some View {
        VStack {
            Button(action: {
                withAnimation {
                    self.showDetails.toggle()
                }
            }, label: {
                Text(&amp;quot;Tap to show details&amp;quot;)
            })

            if showDetails {
                Text(&amp;quot;Details go here.&amp;quot;)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.5_show_details_by_click_button.gif&#34; alt=&#34;11.5_show_details_by_click_button&#34; title=&#34;Show details&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-使用-transition-控制视图从底部滑入&#34;&gt;2. 使用 transition 控制视图从底部滑入&lt;/h3&gt;

&lt;p&gt;默认情况下，SwiftUI 使用 &lt;code&gt;fade淡入淡出动画&lt;/code&gt; 来插入或删除视图，但如果需要，可以通过将&lt;code&gt;transition()&lt;/code&gt; 修改器附加到视图来更改它。
例如，我们可以将详细信息文本视图从底部滑入或滑出，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var showDetails = false

    var body: some View {
        VStack {
            Button(action: {
                withAnimation {
                    self.showDetails.toggle()
                }
            }, label: {
                Text(&amp;quot;Tap to show details&amp;quot;)
            })

            if showDetails {
                Text(&amp;quot;Details go here.&amp;quot;)
                    .transition(.move(edge: .bottom))
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.5_show_details_from_bottom.gif&#34; alt=&#34;11.5_show_details_from_bottom&#34; title=&#34;Show details from bottom&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-使用-transaction-slide&#34;&gt;3. 使用 transaction(.slide)&lt;/h3&gt;

&lt;p&gt;还有 &lt;code&gt;.slide&lt;/code&gt; 过渡，它导致视图从其前导中动画化并在其后缘上动画化:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var showDetails = false

    var body: some View {
        VStack {
            Button(action: {
                withAnimation {
                    self.showDetails.toggle()
                }
            }, label: {
                Text(&amp;quot;Tap to show details&amp;quot;)
            })

            if showDetails {
                Text(&amp;quot;Details go here.&amp;quot;)
                    .transition(.slide)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.5_show_details_transaction_slide.gif&#34; alt=&#34;11.5_show_details_transaction_slide&#34; title=&#34;Show details with transaction.slide&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-设置-transition-scale&#34;&gt;4. 设置 transition(.scale)&lt;/h3&gt;

&lt;p&gt;以及 &lt;code&gt;.scale&lt;/code&gt; 转换，它使视图在进入时从零缩放到全尺寸，然后在退出时返回到零：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var showDetails = false

    var body: some View {
        VStack {
            Button(action: {
                withAnimation {
                    self.showDetails.toggle()
                }
            }, label: {
                Text(&amp;quot;Tap to show details&amp;quot;)
            })

            if showDetails {
                Text(&amp;quot;Details go here.&amp;quot;)
                    .transition(.scale)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.5_show_details_transaction_scale.gif&#34; alt=&#34;11.5_show_details_transaction_scale&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11.4_如何创建显式动画</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.4_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%98%BE%E5%BC%8F%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Tue, 06 Aug 2019 17:36:12 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.4_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%98%BE%E5%BC%8F%E5%8A%A8%E7%94%BB/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;如果将动画修改器附加到一个视图上，最终会得到 &lt;code&gt;隐式动画&lt;/code&gt; - 即使我们只是递增整数或切换布尔值，更改视图中其他位置的某些状态也可能会使用动画。&lt;/p&gt;

&lt;p&gt;另一种方法是使用显式动画，在这种情况下，您不会将修改器附加到相关视图，而是要求SwiftUI为您要进行的精确更改设置动画。 为此，请在对 &lt;code&gt;withAnimation()&lt;/code&gt; 的调用中包装更改。&lt;/p&gt;

&lt;h3 id=&#34;2-简单显式动画&#34;&gt;2. 简单显式动画&lt;/h3&gt;

&lt;p&gt;例如，下面代码使用显式动画使每次点击时按钮逐渐消失:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var opacity: Double = 1

    var body: some View {
        Button(action: {
            withAnimation {
                self.opacity -= 0.2
            }
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
                .padding()
                .opacity(opacity)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.4_explicit_animation_opacity.gif&#34; alt=&#34;11.4_explicit_animation_opacity&#34; title=&#34;Set a explicit animation for opacity&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-设置显式动画类型&#34;&gt;3. 设置显式动画类型&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;withAnimation()&lt;/code&gt; 接收一个指定所需动画类型的参数，因此我们可以创建一个三秒钟的线性动画，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var opacity: Double = 1

    var body: some View {
        Button(action: {
            withAnimation(.linear(duration: 3), {
                self.opacity -= 0.2
            })
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
                .padding()
                .opacity(opacity)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
![11.4_explicit_animation_linear_opacity](img/11.4_explicit_animation_linear_opacity.gif &amp;ldquo;Set a explicit linear animation for opacity&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h3&gt;

&lt;p&gt;显式动画通常很有用，因为它们会使每个受影响的视图都出现动画，而不仅仅是那些附加了隐式动画的视图。 例如，如果视图A必须为视图B腾出空间作为动画的一部分，但只有视图B附加了动画，那么除非使用显式动画，否则视图A将跳转到其新位置而不进行动画处理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11.3_如何设置绑定值更改的动画</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.3_%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BB%91%E5%AE%9A%E5%80%BC%E6%9B%B4%E6%94%B9%E7%9A%84%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Tue, 06 Aug 2019 17:16:47 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.3_%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BB%91%E5%AE%9A%E5%80%BC%E6%9B%B4%E6%94%B9%E7%9A%84%E5%8A%A8%E7%94%BB/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 的双向绑定让我们可以调整程序的状态，我们可以通过调整视图层次结构来响应它。 例如，我们可能会使某些文本显示或消失，或调整视图的不透明度。&lt;/p&gt;

&lt;p&gt;我们可以通过向绑定添加 &lt;code&gt;animation()&lt;/code&gt; 来对绑定进行修改而引起的更改进行动画处理，而不是立即进行状态更改。例如，此视图有一个切换按钮，根据切换的阶段显示或隐藏文本视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var showingWelcome = false
    
    var body: some View {
        VStack {
            Toggle(isOn: $showingWelcome, label: {
                Text(&amp;quot;Toggle label&amp;quot;)
            })
            
            if showingWelcome {
                Text(&amp;quot;Hellow SwiftUI&amp;quot;)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.3_binding_without_animation.gif&#34; alt=&#34;11.3_binding_without_animation&#34; title=&#34;Binding without animation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果没有动画，文本视图将立即显示或消失，从而导致视觉跳跃。 如果我们修改了 toggle
，那么它被绑定到 &lt;code&gt;$showingWelcome.animation()&lt;/code&gt; ，那么文本视图将平滑滑入:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var showingWelcome = false
    
    var body: some View {
        VStack {
            Toggle(isOn: $showingWelcome.animation(), label: {
                Text(&amp;quot;Toggle label&amp;quot;)
            })
            
            if showingWelcome {
                Text(&amp;quot;Hellow SwiftUI&amp;quot;)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.3_binding_with_animation.gif&#34; alt=&#34;11.3_binding_with_animation&#34; title=&#34;Binding with animation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果希望对动画有更多的控制，可以将参数传递给影响转换方式的 &lt;code&gt;animation()&lt;/code&gt;。例如，下面代码将使文本与弹簧动画一起出现:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.3_binding_with_spring_animation.gif&#34; alt=&#34;11.3_binding_with_spring_animation&#34; title=&#34;Binding with a spring animation&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11.2_如何创建弹性动画</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.2_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%BC%B9%E6%80%A7%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Tue, 06 Aug 2019 16:58:50 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.2_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%BC%B9%E6%80%A7%E5%8A%A8%E7%94%BB/</guid>
      <description>

&lt;p&gt;SwiftUI 内置了对弹性动画的支持，这些动画可以移动到目标点，越过一点，然后反弹。&lt;/p&gt;

&lt;h3 id=&#34;1-简单演示&#34;&gt;1. 简单演示&lt;/h3&gt;

&lt;p&gt;如果只单独使用 &lt;code&gt;.spring()&lt;/code&gt;，而没有参数，则会得到一个合理的默认值。因此，下面代码将创建一个弹性动画，每次点击按钮时，它将旋转45度:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var angle: Double = 0

    var body: some View {
        Button(action: {
            self.angle += 45
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
                .padding()
                .rotationEffect(.degrees(angle))
                .animation(.spring())
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.2_spring_animation_rotate_button.gif&#34; alt=&#34;11.2_spring_animation_rotate_button&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-细粒度控制弹性动画&#34;&gt;2. 细粒度控制弹性动画&lt;/h3&gt;

&lt;p&gt;如果我们想要对弹性动画进行细粒度的控制，可以发送任何我们感兴趣的参数: 对象的质量、弹簧的刚度、弹性减慢的速度以及它在启动时开始移动的速度。&lt;/p&gt;

&lt;p&gt;例如，下面代码会创建一个弹性阻尼非常低的按钮，这意味着它会在达到目标角度之前长时间反弹:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var angle: Double = 0

    var body: some View {
        Button(action: {
            self.angle += 45
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
                .padding()
                .rotationEffect(.degrees(angle))
                .animation(.interpolatingSpring(mass: 1, stiffness: 1, damping: 0.1, initialVelocity: 10))
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.2_interpolatingspring_animation_rotate_button.gif&#34; alt=&#34;11.2_interpolatingspring_animation_rotate_button&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11.1_如何创建基本动画</title>
      <link>https://coderxdlee.github.io/post/swiftui/11-animation/11.1_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%9F%BA%E6%9C%AC%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Tue, 06 Aug 2019 16:16:55 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/11-animation/11.1_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%9F%BA%E6%9C%AC%E5%8A%A8%E7%94%BB/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-初识&#34;&gt;1. 初识&lt;/h3&gt;

&lt;p&gt;SwiftUI 通过其 &lt;code&gt;animation()&lt;/code&gt; 修改器内置了对动画的支持。 要使用此修改器，请将其放在视图的任何其它修改器之后，并告诉它我们想要什么样的动画。&lt;/p&gt;

&lt;h3 id=&#34;2-缩放动画&#34;&gt;2. 缩放动画&lt;/h3&gt;

&lt;p&gt;例如，下面代码创建一个按钮，每次按下它时，其缩放效果会增加1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var scale: CGFloat = 1
    
    var body: some View {
        Button(action: {
            self.scale += 1
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
            .scaleEffect(scale)
                .animation(.default)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.1_animation_default_scale_button.gif&#34; alt=&#34;11.1_animation_default_scale_button&#34; title=&#34;Scale a button using the default animation&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-设置动画持续时间&#34;&gt;2. 设置动画持续时间&lt;/h3&gt;

&lt;p&gt;如果需要，我们可以为动画指定精确的持续时间。 例如，下面代码会在三秒钟内激活缩放效果:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var scale: CGFloat = 1
    
    var body: some View {
        Button(action: {
            self.scale += 1
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
            .scaleEffect(scale)
                .animation(.linear(duration: 3))
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.1_animation_linear_scale_button_3s.gif&#34; alt=&#34;11.1_animation_linear_scale_button_3s&#34; title=&#34;Set a linear animation with 3s duration&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-曲线动画&#34;&gt;3. 曲线动画&lt;/h3&gt;

&lt;p&gt;我们也可以指定曲线动画，在 &lt;code&gt;.easeIn&lt;/code&gt;, &lt;code&gt;.easeOut&lt;/code&gt;, &lt;code&gt;.easeInOut&lt;/code&gt;, and &lt;code&gt;.custom&lt;/code&gt; 之间进行选择，后者允许我们指定自己的控制点。&lt;/p&gt;

&lt;p&gt;例如，下面代码会激活缩放效果，使其开始慢并逐渐变快:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var scale: CGFloat = 1
    
    var body: some View {
        Button(action: {
            self.scale += 1
        }, label: {
            Text(&amp;quot;Tap here!&amp;quot;)
            .scaleEffect(scale)
                .animation(.easeIn)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.1_animation_easein_scale_button.gif&#34; alt=&#34;11.1_animation_easein_scale_button&#34; title=&#34;Set a easeIn animation&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-设置多个动画变量&#34;&gt;4. 设置多个动画变量&lt;/h3&gt;

&lt;p&gt;我们可以为许多其他修改器设置动画，例如2D和3D旋转，不透明度，边框等。 例如，下面代码会使按钮旋转并在每次点击时增加其边框:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    @State private var angle: Double = 0
    @State private var borderThickness: CGFloat = 1

    var body: some View {
        Button(action: {
            self.angle += 45
            self.borderThickness += 1
        }, label: {
            Text(&amp;quot;Tap here&amp;quot;)
                .padding()
                .border(Color.red, width: borderThickness)
                .rotationEffect(.degrees(angle))
                .animation(.default)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/11.1_animation_default_multi_var.gif&#34; alt=&#34;11.1_animation_default_multi_var&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
