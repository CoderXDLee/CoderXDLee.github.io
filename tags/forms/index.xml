<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forms on M X</title>
    <link>https://coderxdlee.github.io/tags/forms/</link>
    <description>Recent content in Forms on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Fri, 02 Aug 2019 15:04:09 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/forms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>6.5_启用和禁用表单中的元素</title>
      <link>https://coderxdlee.github.io/post/swiftui/6-forms/6.5_%E5%90%AF%E7%94%A8%E5%92%8C%E7%A6%81%E7%94%A8%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 02 Aug 2019 15:04:09 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/6-forms/6.5_%E5%90%AF%E7%94%A8%E5%92%8C%E7%A6%81%E7%94%A8%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 允许我们通过使用 &lt;code&gt;disabled()&lt;/code&gt; 修饰符来禁用表单的任何部分甚至整个表单。这需要一个布尔值来定义是否应禁止使用该元素。表单元素的样式会自动更新以反映其状态-例如，&lt;em&gt;buttons&lt;/em&gt; 和  &lt;em&gt;toggles&lt;/em&gt; 变为灰色。&lt;/p&gt;

&lt;p&gt;例如，这将创建一个包含两个 sections 的表单：一个 &lt;em&gt;section&lt;/em&gt; 包含 Toggle ，另一个 &lt;em&gt;section&lt;/em&gt; 包含仅在切换打开时才启用的 Button：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    @State var agreedToTerms = false
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                    Toggle(isOn: $agreedToTerms) {
                        Text(&amp;quot;Agree to terms and conditions&amp;quot;)
                    }
                }
                Section {
                    Button(action: {
                        // show next screen here
                    }) {
                        Text(&amp;quot;Continue&amp;quot;)
                    }
                    .disabled(!agreedToTerms)
                }
            }
            .navigationBarTitle(Text(&amp;quot;Welcome&amp;quot;))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/6.5_form_enable_disable.gif&#34; alt=&#34;6.5_form_enable_disable&#34; title=&#34;Form enable and disable&#34; /&gt;
如您所见，只需将禁用 &lt;code&gt;(!agreeToTerms)&lt;/code&gt; 添加到修改器列表中即可禁用该按钮。&lt;/p&gt;

&lt;p&gt;与许多其他SwiftIUI修饰符一样，您可以提升 &lt;code&gt;disabled()&lt;/code&gt;，以便它在 Section 上运行，甚至在整个表单上运行，这取决于您想要的行为——例如，只需移动 &lt;code&gt;disabled(!agreedToTerms)&lt;/code&gt; 使它位于该 section 之后:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Section {
    Button(action: {
        // show next screen here
    }) {
        Text(&amp;quot;Continue&amp;quot;)
    }
}
.disabled(!agreedToTerms)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6.4_表单中选择器的使用</title>
      <link>https://coderxdlee.github.io/post/swiftui/6-forms/6.4_%E8%A1%A8%E5%8D%95%E4%B8%AD%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 02 Aug 2019 13:49:59 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/6-forms/6.4_%E8%A1%A8%E5%8D%95%E4%B8%AD%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;在表单内部，SwiftUI 的 &lt;code&gt;选择器视图&lt;/code&gt; 具有特殊的行为，可根据我们使用它们的平台自动进行调整。在 iOS 上，这种行为尤其令人印象深刻，因为选择器可以折叠到一个列表行，该行导航到一个新的可能选项列表中——这是处理许多选项的一种非常自然的方式。&lt;/p&gt;

&lt;p&gt;例如，这将创建一个带有选择器的表单，并为其项使用数组：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    var strengths = [&amp;quot;Mild&amp;quot;, &amp;quot;Medium&amp;quot;, &amp;quot;Mature&amp;quot;]
    @State var selectedStrength = 0
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                    Picker(selection: $selectedStrength, label: Text(&amp;quot;Text strength&amp;quot;)) {
                        ForEach(0..&amp;lt;strengths.count) {
                            Text(self.strengths[$0]).tag($0)
                        }
                    }
                }
            }
            .navigationBarTitle(Text(&amp;quot;Select your cheese&amp;quot;))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/6.4_form_pickers.gif&#34; alt=&#34;6.4_form_pickers&#34; title=&#34;Form pickers&#34; /&gt;
表单中的选择器
在 iOS 上，这将显示为一个单独的列表行，您可以点击该行进入一个新屏幕，显示所有可能的选项—— Mild、Medium 和 Mature。您当前的选择旁边将有一个复选标记，当您选择一个新选项时，它将返回上一个屏幕，并显示当前的选项。&lt;/p&gt;

&lt;p&gt;如果要禁用此行为，可以使用.PickerStyle(.wheel)修饰符强制选取器采用其常规样式，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Picker(selection: $selectedStrength, label: Text(&amp;quot;Text strength&amp;quot;)) {
    ForEach(0..&amp;lt;strengths.count) {
        Text(self.strengths[$0]).tag($0)
    }
}
.pickerStyle(WheelPickerStyle())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/6.4_form_pickers_wheel.gif&#34; alt=&#34;6.4_form_pickers_wheel&#34; title=&#34;Picker with wheel style&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6.3_将表单分成几个sections</title>
      <link>https://coderxdlee.github.io/post/swiftui/6-forms/6.3_%E5%B0%86%E8%A1%A8%E5%8D%95%E5%88%86%E6%88%90%E5%87%A0%E4%B8%AAsections/</link>
      <pubDate>Fri, 02 Aug 2019 12:01:16 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/6-forms/6.3_%E5%B0%86%E8%A1%A8%E5%8D%95%E5%88%86%E6%88%90%E5%87%A0%E4%B8%AAsections/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 的表单通常在分成多个部分时效果最好，就像常规的内容列表一样。 如何将它们分组取决于你，但是通常情况下，按照它们的目的进行分组效果最好 - 如果它是一个订单页面你可以将项目放在一个组中，在另一个组中进行定制，并在第三个组中进行交付。
很有帮助的是，表单 sections 与列表 sections 相同，这意味着您可以在两个地方重复使用相同的代码。因此，您可以向 sections 中添加 &lt;em&gt;header&lt;/em&gt; 和/或 &lt;em&gt;footer&lt;/em&gt; ，或者两者都不使用，只需在 sections 之间获得一些屏幕上的间距。&lt;/p&gt;

&lt;p&gt;例如，这将创建一个包含两个 section 的表单，第一个 section 带有 &lt;em&gt;segmented control&lt;/em&gt; 和 &lt;em&gt;toggle&lt;/em&gt; ，第二个 section 带有保存按钮:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    @State var enableLogging = false
    @State var selectedColor = 0
    @State var colors = [&amp;quot;Red&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Blue&amp;quot;]
    
    var body: some View {
        Form {
            Section(footer: Text(&amp;quot;Note: Enabling logging may slow down the app&amp;quot;)) {
                SegmentedControl(selection: $selectedColor) {
                    ForEach(0..&amp;lt;colors.count) {
                        Text(self.colors[$0]).tag($0)
                    }
                }
                Toggle(isOn: $enableLogging) {
                    Text(&amp;quot;Enable logging&amp;quot;)
                }
            }
            Section {
                Button(action: {
                    
                }) {
                    Text(&amp;quot;Save changes&amp;quot;)
                }
            }
        }
        .navigationBarTitle(Text(&amp;quot;Settings&amp;quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/6.4_form_sections.gif&#34; alt=&#34;6.4_form_sections&#34; title=&#34;Form sections&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6.2_基本表单设计</title>
      <link>https://coderxdlee.github.io/post/swiftui/6-forms/6.2_%E5%9F%BA%E6%9C%AC%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 02 Aug 2019 00:37:07 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/6-forms/6.2_%E5%9F%BA%E6%9C%AC%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;SwiftUI 中的 &lt;code&gt;表单(forms)&lt;/code&gt; 可以当作容器使用，就像 &lt;code&gt;HStack&lt;/code&gt; 和 &lt;code&gt;VStack&lt;/code&gt; 一样，这意味着我们可以根据需要在其中添加其它视图。 但是，表单会自动调整某些控件的行为和样式，以便它们更好地适应表单环境。
例如，我们将创建一个带有 _toggle_、&lt;em&gt;segmentedControl&lt;/em&gt; 和 &lt;em&gt;button&lt;/em&gt; 的表单:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    @State var enableLogging = false
    @State var selectedColor = 0
    @State var colors = [&amp;quot;Red&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Blue&amp;quot;]
    
    var body: some View {
        NavigationView {
            Form {
                Picker(selection: $selectedColor, label: Text(&amp;quot;&amp;quot;)) {
                    ForEach(0..&amp;lt;colors.count) {
                        Text(self.colors[$0]).tag($0)
                    }
                }
                .pickerStyle(SegmentedPickerStyle())
                
                Toggle(isOn: $enableLogging) {
                    Text(&amp;quot;Enable logging!&amp;quot;)
                }
                Button(action: {
                    // activate theme!
                }) {
                    Text(&amp;quot;Save changes&amp;quot;)
                }
            }
            .navigationBarTitle(Text(&amp;quot;Settings&amp;quot;))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/6.3_forms_basic_design.gif&#34; alt=&#34;6.3_forms_basic_design&#34; /&gt;
当代码运行时，我们将看到两件对表单行为至关重要的事情:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 iOS 上，表单自动采用 &lt;code&gt;分组列表&lt;/code&gt; 的样式，因此用户可以看到滚动选项。&lt;/li&gt;
&lt;li&gt;按钮已经调整了自己，看起来像一个可操作的列表行—— &lt;code&gt;左对齐，蓝色&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 我们可以根据需要在表单中包含尽可能多的行，但如果需要超过10，请记住使用组(groups)。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>6.1_表单的使用介绍</title>
      <link>https://coderxdlee.github.io/post/swiftui/6-forms/6.1_%E8%A1%A8%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 02 Aug 2019 00:21:32 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/6-forms/6.1_%E8%A1%A8%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SwiftUI 专注于声明性用户界面，因此它为我们提供了一种构建 &lt;code&gt;表单(Form)&lt;/code&gt; 的绝佳机制也就不足为奇了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;表单(Form)&lt;/code&gt; 指的是用于&lt;strong&gt;收集信息&lt;/strong&gt;的用户输入控件的集合，例如 &lt;em&gt;订单表单&lt;/em&gt; 或 &lt;em&gt;设置界面&lt;/em&gt; 。&lt;/li&gt;
&lt;li&gt;更好的是，在表单中，SwiftUI 的几个部分会自适应放置——它们的外观和行为会发生变化，因此它们与其它输入控件组一起工作得更好。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你认为这很聪明，你会喜欢这个: 实际上 SwiftUI 会动态地调整布局，以便它可以根据代码运行的平台自动为我们生成全新的页面 - 它完全将控件的目的与它们的视觉效果分离开来。 这意味着我们描述了我们想要的东西，SwiftUI 找出了在当前平台上实现这一目标的惯用方法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt; &lt;code&gt;Form&lt;/code&gt; 和 &lt;code&gt;VStack&lt;/code&gt; 一样是常规容器，因此我们可以根据需要在这两者之间自由切换。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
