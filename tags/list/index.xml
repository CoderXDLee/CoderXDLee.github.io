<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>List on M X</title>
    <link>https://coderxdlee.github.io/tags/list/</link>
    <description>Recent content in List on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Tue, 30 Jul 2019 22:26:03 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5.3_如何创建动态项目列表</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.3_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 30 Jul 2019 22:26:03 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.3_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;为了处理动态项目，您必须首先告诉 SwiftUI 如何识别哪个项目是哪个。 这是使用Identifiable协议完成的，该协议只有一个要求：某种类型的 id，SwiftUI可以使用它来查看哪个项目是哪个。
例如，您可以创建一个 Restaurant 结构体，该结构表示餐馆具有ID和name，ID是一个随机标识符，以便SwiftUI知道哪个是哪个：
struct Restaurant: Identifiable {
    var id = UUID()
    var name: String
}
接下来，您将定义列表行的外观。在我们的例子中，我们将定义一个Restaurantrow视图，该视图存储一个餐厅并在文本视图中打印其名称：
struct RestaurantRow : View {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var restaurant: Restaurant

var body: some View {
    Text(&amp;quot;Come and eat at \(restaurant.name)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
最后，我们可以创建一个列表视图来显示所有内容。这意味着创建一些示例数据，将其放入数组中，然后将其传递到要呈现的列表中：
struct ContentView : View {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var body: some View {

    let first = Restaurant(name: &amp;quot;Joe&#39;s Original&amp;quot;)
    let second = Restaurant(name: &amp;quot;The Real Joe&#39;s Original&amp;quot;)
    let third = Restaurant(name: &amp;quot;Original Joe&#39;s&amp;quot;)
    let restaurants = [first, second, third]

    return List(restaurants) { restaurant in
        RestaurantRow(restaurant: restaurant)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
其中大部分只是创建数据——最后一部分是实际操作的地方：
return List(restaurants) { restaurant in
    RestaurantRow(restaurant: restaurant)
}
它从restaurants数组创建一个列表，对数组中的每个项目执行一次闭包。每次执行闭包时，餐厅的输入都将由数组中的一个项目填充，因此我们使用它来创建一个Restaurantrow。
事实上，在这种小case下，我们可以使代码更短:
return List(restaurants, rowContent: RestaurantRow.init)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.2_如何创建静态项列表</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.2_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B9%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 30 Jul 2019 00:23:02 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.2_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B9%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;要创建静态项目列表，首先需要定义列表中每行的外观。 这是一个与其他视图一样的视图，因此您可以编写如下的视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct RestaurantRow : View {
    
    var name: String
    
    var body: some View {
        Text(&amp;quot;Restaurant: \(name)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既然已经定义了每一行的外观，那么就可以创建一个 &lt;code&gt;List&lt;/code&gt;，根据需要创建任意数量的行，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    var body: some View {
        List {
            RestaurantRow(name: &amp;quot;Joe&#39;s Original&amp;quot;)
            RestaurantRow(name: &amp;quot;The Real Joe&#39;s Original&amp;quot;)
            RestaurantRow(name: &amp;quot;Original Joe&#39;s&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_2_list_static_items_list.gif&#34; alt=&#34;5_2_list_static_items_list&#34; title=&#34;static list&#34; /&gt;
当该代码运行时，您将在表中看到三行，就像您在 UIKit 中使用 &lt;code&gt;UITableView&lt;/code&gt; 一样。
您不需要使每一行使用相同的视图类型，因此您可以根据需要混合和匹配行视图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.1_使用List</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.1_%E4%BD%BF%E7%94%A8list/</link>
      <pubDate>Mon, 29 Jul 2019 01:40:08 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.1_%E4%BD%BF%E7%94%A8list/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 的 &lt;code&gt;List&lt;/code&gt; 视图类似于 &lt;code&gt;UITableView&lt;/code&gt;，它可以根据您的需要显示静态或动态表视图单元格(table view cells)。 但是，它使用起来要简单得多:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们不需要在 storyboard 中创建原型cell( &lt;em&gt;prototype cell&lt;/em&gt; );&lt;/li&gt;
&lt;li&gt;也不需要在代码中注册 Cell;&lt;/li&gt;
&lt;li&gt;我们不需要告诉它有多少行;&lt;/li&gt;
&lt;li&gt;我们不需要手动出列(dequeue)和配置单元格等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相反，SwiftUI 的列表是为可组合性而设计的 - 旨在能够从较小的东西构建更大的东西。 因此，SwiftUI 不需要一个手动配置单元的大视图控制器，而是让我们构建小视图，知道如何将自己配置为列表行，然后使用它们。&lt;/p&gt;

&lt;p&gt;在代码大小方面（如果没有其他的话），差异是惊人的——您可以删除几乎所有的表视图代码，仍然可以获得与您习惯的相同的出色外观和感觉。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
