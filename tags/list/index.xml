<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>List on M X</title>
    <link>https://coderxdlee.github.io/tags/list/</link>
    <description>Recent content in List on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Thu, 01 Aug 2019 23:23:26 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5.9_如何使用隐式叠加</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%9A%90%E5%BC%8F%E5%8F%A0%E5%8A%A0/</link>
      <pubDate>Thu, 01 Aug 2019 23:23:26 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%9A%90%E5%BC%8F%E5%8F%A0%E5%8A%A0/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;如果创建一个动态列表并在每行中放置多个内容，会发生什么情况？SwiftUI 的解决方案简单、灵活，并且在默认情况下为我们提供了良好的行为: 它创建了一个隐式的 &lt;code&gt;HStack&lt;/code&gt; 来保存您的项目，因此它们会自动进行水平布局。
例如，如果我们想要创建一行，其中左侧有一张小图片，剩余的空间分配给一个文本字段，那么我们将从一个结构开始，这样保存数据:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User: Identifiable {
    var id = UUID()
    var username = &amp;quot;Anonymous&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我已经给出了这两个默认值，以便简化示例。
完成后，我们可以创建一个包含三个用户的数组，并在动态列表中显示它们，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    let users = [User(), User(), User()]

    var body: some View {
        List(users) { user in
            Image(&amp;quot;paul-hudson&amp;quot;)
                .resizable()
                .frame(width: 40, height: 40)
            Text(user.username)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_9_list_implicit_stacking.gif&#34; alt=&#34;5_9_list_implicit_stacking&#34; title=&#34;Implicit stacking&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.8_如何制作分组列表</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.8_%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E5%88%86%E7%BB%84%E5%88%97%E8%A1%A8/</link>
      <pubDate>Thu, 01 Aug 2019 23:22:15 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.8_%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E5%88%86%E7%BB%84%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 的 List 支持 &lt;em&gt;grouped&lt;/em&gt; 或 &lt;em&gt;plain&lt;/em&gt; 样式，就像 &lt;code&gt;UITableView&lt;/code&gt; 一样。默认为 &lt;em&gt;plain&lt;/em&gt; 样式，但如果要改为 &lt;em&gt;grouped&lt;/em&gt; 样式，则应使用 列表 的 &lt;code&gt;.listStyle(.grouped)&lt;/code&gt; 修饰符。
例如，这里定义了一个示例行，并将其放置在分组列表中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ExampleRow : View {
    var body: some View {
        Text(&amp;quot;Example Row&amp;quot;)
    }
}

struct ContentView : View {
    var body: some View {
        List {
            Section(header: Text(&amp;quot;Examples&amp;quot;)) {
                ExampleRow()
                ExampleRow()
                ExampleRow()
            }
        }.listStyle(.grouped)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_8_list_grouped_style.gif&#34; alt=&#34;5_8_list_grouped_style&#34; title=&#34;List - grouped style&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.7_如何向列表中添加sections</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.7_%E5%A6%82%E4%BD%95%E5%90%91%E5%88%97%E8%A1%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0sections/</link>
      <pubDate>Thu, 01 Aug 2019 23:21:13 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.7_%E5%A6%82%E4%BD%95%E5%90%91%E5%88%97%E8%A1%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0sections/</guid>
      <description>&lt;p&gt;SwiftUI 的列表视图内置了对 &lt;em&gt;sections&lt;/em&gt; 和 &lt;em&gt;section headers&lt;/em&gt; 的支持，就像 UIKit 中的 &lt;code&gt;UITableView&lt;/code&gt; 一样。若要给某些 cells 添加一个 _section_，首先在其周围放置一个 &lt;code&gt;Section&lt;/code&gt;，也可以添加 &lt;em&gt;header&lt;/em&gt; 和 _footer_。
举个例子，这里有一行包含提醒应用的任务数据：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct TaskRow: View {
    var body: some View {
        Text(&amp;quot;Task data goes here&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们要做的是创建一个列表视图，它有两个Sections：一个用于重要任务，另一个用于次要任务。这是它的样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    var body: some View {
        List {
            Section(header: Text(&amp;quot;Important task&amp;quot;)) {
                TaskRow()
                TaskRow()
                TaskRow()
            }
            Section(header: Text(&amp;quot;Other task&amp;quot;)) {
                TaskRow()
                TaskRow()
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_7_list_sections.gif&#34; alt=&#34;5_7_list_sections&#34; title=&#34;List sections&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.6_如何使用EditButton在列表上启用编辑</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.6_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8editbutton%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%8A%E5%90%AF%E7%94%A8%E7%BC%96%E8%BE%91/</link>
      <pubDate>Wed, 31 Jul 2019 00:40:13 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.6_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8editbutton%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%8A%E5%90%AF%E7%94%A8%E7%BC%96%E8%BE%91/</guid>
      <description>&lt;p&gt;如果您已配置 SwiftUI 列表视图以支持删除或编辑其项目，则可以允许用户通过在某个地方添加 &lt;code&gt;EditButton&lt;/code&gt; 来切换列表视图的编辑模式。
例如，这个 ContentView 结构定义了一个用户数组，附加了一个 &lt;code&gt;OnDelete()&lt;/code&gt; 方法，然后在导航栏中添加了一个编辑按钮:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    @State var users = [&amp;quot;Paul&amp;quot;, &amp;quot;Taylor&amp;quot;, &amp;quot;Adele&amp;quot;]
    
    var body: some View {
        NavigationView {
            List {
                ForEach(users.identified(by: \.self)) { user in
                    Text(user)
                }
                .onDelete(perform: delete)
            }
            .navigationBarItems(trailing: EditButton())
        }
    }
    
    func delete(at offsets: IndexSet) {
        if let first = offsets.first {
            users.remove(at: first)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行后，您会发现您可以点击编辑按钮来启用或禁用列表中项目的编辑模式。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.5_如何让用户移动列表中的行</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.5_%E5%A6%82%E4%BD%95%E8%AE%A9%E7%94%A8%E6%88%B7%E7%A7%BB%E5%8A%A8%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%A1%8C/</link>
      <pubDate>Wed, 31 Jul 2019 00:26:20 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.5_%E5%A6%82%E4%BD%95%E8%AE%A9%E7%94%A8%E6%88%B7%E7%A7%BB%E5%8A%A8%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%A1%8C/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 为我们提供了简单地列表挂钩（hooks），让我们可以移动行(rows)，尽管 WWDC 上演示的一些功能在当前的测试版中实际上不可用，所以我们需要一个变通的解决方法。
我们可以将 &lt;code&gt;onMove(perform:)&lt;/code&gt; 修饰符附加到列表中的项目，并让它在移动操作发生时调用我们选择的方法。 该方法需要接受 source IndexSet 和 destination Int，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func move(from source: IndexSet, to destination: Int) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移动多个项目时，最好先移动后一个项目，这样可以避免移动其他项目并混淆索引
例如，我们可以创建一个 ContentView 结构，它设置一个由三个用户名字符串组成的数组，并要求SwiftUI在调用 &lt;code&gt;move()&lt;/code&gt;方法时移动它们。为了激活“移动”（即显示拖动手柄），它还向导航视图添加了一个编辑按钮，以便用户切换编辑模式。
这是代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    @State var users = [&amp;quot;Paul&amp;quot;, &amp;quot;Taylor&amp;quot;, &amp;quot;Adele&amp;quot;]
    
    var body: some View {
        NavigationView {
            List {
                ForEach(users, id: \.self, content: { user in
                    Text(user)
                })
                .onMove(perform: move)
            }
            .navigationBarItems(trailing: EditButton())
        }
    }
    
    func move(from source: IndexSet, to destination: Int) {
        // sort the indexes low to high
        let reverseSource = source.sorted()
        
        // then loop from the back to avoid reordering problems
        for index in reverseSource.reversed() {
            // for each item, remove it and insert it at the destination
            users.insert(users.remove(at: index), at: destination)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_5_list_move_row.gif&#34; alt=&#34;5_5_list_move_row&#34; title=&#34;Move row&#34; /&gt;
在WWDC会话演示中，他们的 &lt;code&gt;move()&lt;/code&gt; 方法只是一行代码，因为它在 Swift 数组上使用了一个对我们不可用的扩展——希望它很快就会到来！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.4_如何让用户从列表中删除行</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.4_%E5%A6%82%E4%BD%95%E8%AE%A9%E7%94%A8%E6%88%B7%E4%BB%8E%E5%88%97%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E8%A1%8C/</link>
      <pubDate>Tue, 30 Jul 2019 23:55:31 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.4_%E5%A6%82%E4%BD%95%E8%AE%A9%E7%94%A8%E6%88%B7%E4%BB%8E%E5%88%97%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E8%A1%8C/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;通过将 &lt;code&gt;OnDelete(perform:)&lt;/code&gt; 处理程序附加到部分或全部数据，SwiftUI 可以方便地让用户滑动以删除行。此处理程序需要具有一个特定签名，它可以接受多个索引以删除，如:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func delete(at offsets: IndexSet) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里，您可以循环访问集合中的每个索引，或者只读取第一个索引（如果您只想处理它的话）。因为SwiftUI 正在监视您的状态，所以您所做的任何更改都将自动反映在您的UI中。
注意：此功能的 WWDC 演示使用了一个名为 &lt;code&gt;remove(atOffsets:)&lt;/code&gt; 的不存在的Swift数组方法，它为我们完成了所有这些工作 - 希望这将在未来版本中出现。
例如，此代码创建一个包含三个项目列表的 ContentView 结构，然后附加一个 &lt;code&gt;OnDelete(perform:)&lt;/code&gt; 修饰符，用于删除列表中的任何项目:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State var users = [&amp;quot;Paul&amp;quot;, &amp;quot;Taylor&amp;quot;, &amp;quot;Adele&amp;quot;]
    
    var body: some View {
        List {
            ForEach(users, id: \.self) { user in
                Text(user)
            }
            .onDelete(perform: delete)
        }
    }
    
    func delete(at offsets: IndexSet) {
        if let first = offsets.first {
            users.remove(at: first)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_4_list_delete_row.gif&#34; alt=&#34;5_4_list_delete_row&#34; title=&#34;Delete a row&#34; /&gt;
如果您运行该代码，您会发现可以滑动以删除列表中的任何行。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.3_如何创建动态项目列表</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.3_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 30 Jul 2019 22:26:03 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.3_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;为了处理动态项目，我们必须首先告诉 SwiftUI 如何识别哪个项目是哪个。 这是使用 &lt;code&gt;Identifiable&lt;/code&gt; 协议完成的，该协议只有一个要求: 某种类型的 id 值，SwiftUI 可以使用它来查看哪个项目是哪个。
例如，我们可以创建一个 &lt;code&gt;Restaurant&lt;/code&gt; 结构体，该结构表示餐馆具有 ID 和 name ，ID 是一个随机标识符，以便 SwiftUI 知道哪个是哪个:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Restaurant: Identifiable {
    var id = UUID()
    var name: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，我们将定义列表行的外观。在我们的例子中，我们将定义一个 &lt;code&gt;Restaurantrow&lt;/code&gt; 视图，该视图存储一个餐厅并在文本视图中打印其名称:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct RestaurantRow : View {
    
    var restaurant: Restaurant
    
    var body: some View {
        Text(&amp;quot;Come and eat at \(restaurant.name)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，我们可以创建一个列表视图来显示所有内容。这意味着创建一些示例数据，将其放入数组中，然后将其传递到要呈现的列表中:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    
    var body: some View {
        
        let first = Restaurant(name: &amp;quot;Joe&#39;s Original&amp;quot;)
        let second = Restaurant(name: &amp;quot;The Real Joe&#39;s Original&amp;quot;)
        let third = Restaurant(name: &amp;quot;Original Joe&#39;s&amp;quot;)
        let restaurants = [first, second, third]
        
        return List(restaurants) { restaurant in
            RestaurantRow(restaurant: restaurant)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中大部分只是创建数据——最后一部分是实际操作的地方:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;return List(restaurants) { restaurant in
    RestaurantRow(restaurant: restaurant)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它从 restaurants 数组创建一个列表，对数组中的每个项目执行一次闭包。每次执行闭包时，餐厅的输入都将由数组中的一个项目填充，因此我们使用它来创建一个 Restaurantrow。
事实上，在这种小case下，我们可以使代码更短:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;return List(restaurants, rowContent: RestaurantRow.init)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_3_list_dynamic_items_list.gif&#34; alt=&#34;5_3_list_dynamic_items_list&#34; title=&#34;Dynamic list&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.2_如何创建静态项列表</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.2_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B9%E5%88%97%E8%A1%A8/</link>
      <pubDate>Tue, 30 Jul 2019 00:23:02 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.2_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B9%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;要创建静态项目列表，首先需要定义列表中每行的外观。 这是一个与其他视图一样的视图，因此您可以编写如下的视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct RestaurantRow : View {
    
    var name: String
    
    var body: some View {
        Text(&amp;quot;Restaurant: \(name)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既然已经定义了每一行的外观，那么就可以创建一个 &lt;code&gt;List&lt;/code&gt;，根据需要创建任意数量的行，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView : View {
    var body: some View {
        List {
            RestaurantRow(name: &amp;quot;Joe&#39;s Original&amp;quot;)
            RestaurantRow(name: &amp;quot;The Real Joe&#39;s Original&amp;quot;)
            RestaurantRow(name: &amp;quot;Original Joe&#39;s&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/5_2_list_static_items_list.gif&#34; alt=&#34;5_2_list_static_items_list&#34; title=&#34;static list&#34; /&gt;
当该代码运行时，您将在表中看到三行，就像您在 UIKit 中使用 &lt;code&gt;UITableView&lt;/code&gt; 一样。
您不需要使每一行使用相同的视图类型，因此您可以根据需要混合和匹配行视图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.1_使用List</title>
      <link>https://coderxdlee.github.io/post/swiftui/5-list/5.1_%E4%BD%BF%E7%94%A8list/</link>
      <pubDate>Mon, 29 Jul 2019 01:40:08 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/5-list/5.1_%E4%BD%BF%E7%94%A8list/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 的 &lt;code&gt;List&lt;/code&gt; 视图类似于 &lt;code&gt;UITableView&lt;/code&gt;，它可以根据您的需要显示静态或动态表视图单元格(table view cells)。 但是，它使用起来要简单得多:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们不需要在 storyboard 中创建原型cell( &lt;em&gt;prototype cell&lt;/em&gt; );&lt;/li&gt;
&lt;li&gt;也不需要在代码中注册 Cell;&lt;/li&gt;
&lt;li&gt;我们不需要告诉它有多少行;&lt;/li&gt;
&lt;li&gt;我们不需要手动出列(dequeue)和配置单元格等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相反，SwiftUI 的列表是为可组合性而设计的 - 旨在能够从较小的东西构建更大的东西。 因此，SwiftUI 不需要一个手动配置单元的大视图控制器，而是让我们构建小视图，知道如何将自己配置为列表行，然后使用它们。&lt;/p&gt;

&lt;p&gt;在代码大小方面（如果没有其他的话），差异是惊人的——您可以删除几乎所有的表视图代码，仍然可以获得与您习惯的相同的出色外观和感觉。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
