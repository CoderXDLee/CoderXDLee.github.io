<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI on M X</title>
    <link>https://coderxdlee.github.io/tags/swiftui/</link>
    <description>Recent content in SwiftUI on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jul 2019 15:46:29 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.9_如何使用图像和其它视图作为背景</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E5%92%8C%E5%85%B6%E5%AE%83%E8%A7%86%E5%9B%BE%E4%BD%9C%E4%B8%BA%E8%83%8C%E6%99%AF/</link>
      <pubDate>Wed, 24 Jul 2019 15:46:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E5%92%8C%E5%85%B6%E5%AE%83%E8%A7%86%E5%9B%BE%E4%BD%9C%E4%B8%BA%E8%83%8C%E6%99%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.8_如何显示几何形状</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.8_%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6/</link>
      <pubDate>Wed, 24 Jul 2019 15:46:01 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.8_%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.7_如何渲染渐变</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.7_%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E6%B8%90%E5%8F%98/</link>
      <pubDate>Wed, 24 Jul 2019 15:45:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.7_%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E6%B8%90%E5%8F%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.6_如何调整图像视图的填充模式</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.6_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 24 Jul 2019 15:45:07 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.6_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.5_如何使用图像视图绘制图像</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.5_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Wed, 24 Jul 2019 15:44:15 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.5_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.4_如何格式化文本视图中的文本</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.4_%E5%A6%82%E4%BD%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</link>
      <pubDate>Wed, 24 Jul 2019 15:43:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.4_%E5%A6%82%E4%BD%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.3_如何使用字体颜色行距等设置文本视图的样式</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.3_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%A1%8C%E8%B7%9D%E7%AD%89%E8%AE%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E7%9A%84%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Wed, 24 Jul 2019 15:42:28 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.3_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%A1%8C%E8%B7%9D%E7%AD%89%E8%AE%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E7%9A%84%E6%A0%B7%E5%BC%8F/</guid>
      <description>

&lt;!-- more --&gt;

&lt;p&gt;文本视图不仅在外观方面给了我们一个可预见的广泛控制，而且还设计成与苹果的核心技术（如 &lt;code&gt;Dynamic Type&lt;/code&gt;）无缝配合。&lt;/p&gt;

&lt;h3 id=&#34;1-字体&#34;&gt;1. 字体&lt;/h3&gt;

&lt;p&gt;默认情况下，文本视图有一个 &lt;code&gt;Body&lt;/code&gt; 动态类型样式，但是我们可以通过以下方式调用 &lt;code&gt;.font()&lt;/code&gt;，从其它 &lt;em&gt;sizes&lt;/em&gt; 和 &lt;em&gt;weights&lt;/em&gt; 进行选择:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones&amp;quot;)
    .lineLimit(nil)
    .font(.largeTitle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/large_title_font.png&#34; alt=&#34;large_title_font_text&#34; title=&#34;largeTitle font&#34; /&gt;
我们现在在文本视图下面使用了两个修饰符，这没关系 - 你可以将它们堆叠起来，并且它们都会生效。&lt;/p&gt;

&lt;h3 id=&#34;2-文本对齐&#34;&gt;2. 文本对齐&lt;/h3&gt;

&lt;p&gt;特别是，现在我们有多行文本，我们需要调整文本的对齐方式，使其居中，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones&amp;quot;)
    .lineLimit(nil)
    .font(.largeTitle)
    .multilineTextAlignment(.center)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/center_alignment.png&#34; alt=&#34;center_alignment_text&#34; title=&#34;center alignment&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-字体颜色&#34;&gt;3. 字体颜色&lt;/h3&gt;

&lt;p&gt;我们可以通过 &lt;code&gt;.foregroundColor()&lt;/code&gt; 修饰符来设置文本颜色，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;The best laid plans&amp;quot;)
    .foregroundColor(Color.red)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/foregroundcolor_text.png&#34; alt=&#34;foregroundcolor_text&#34; title=&#34;foreground color&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-背景&#34;&gt;4. 背景&lt;/h3&gt;

&lt;p&gt;我们可以使用 &lt;code&gt;.background()&lt;/code&gt; 来设置背景颜色，但是它不仅仅可以用来设置背景颜色，也可以设置背景视图。无论如何，为了给我们的文本视图设置一个黄色背景，代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;The best laid plans&amp;quot;)
    .foregroundColor(Color.red)
    .background(Color.yellow)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/backgroundcolor_text.png&#34; alt=&#34;backgroundcolor_text&#34; title=&#34;background color&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-行间距&#34;&gt;5. 行间距&lt;/h3&gt;

&lt;p&gt;我们可以设置多行文本的行间距，行间距默认值为0，表示没有额外的行间距，但是我们可以通过以下方式在行与行之间指定一个值来添加额外的行间距。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones&amp;quot;)
    .lineLimit(nil)
    .font(.largeTitle)
    .lineSpacing(50)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/line_spacing_text.png&#34; alt=&#34;line_spacing_text&#34; title=&#34;line spacing&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.2 如何使用文本视图创建静态标签</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.2_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 24 Jul 2019 13:35:01 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.2_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E6%A0%87%E7%AD%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-基本用法&#34;&gt;1. 基本用法&lt;/h3&gt;

&lt;p&gt;文本视图 &lt;code&gt;Text&lt;/code&gt; 主要用于在屏幕上显示静态文本，相当于 UIKit 中的 UILabel。最基本的用法如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在内容视图的预览窗口中，您可能会看到 &lt;code&gt;Automatic preview updating paused&lt;/code&gt;， 继续按 Resume 以让 Swift 开始构建代码并向您展示其外观的实时预览。&lt;/p&gt;

&lt;h3 id=&#34;2-设置显示行数&#34;&gt;2. 设置显示行数&lt;/h3&gt;

&lt;p&gt;默认情况下，Text 只显示一行 - 如果空间不足，字符将被剪切并替换为 &lt;code&gt;...&lt;/code&gt;。因此如果我们要显示的文本很长，就会看到这种情况发生。如果要改变这种行为 - 比如你希望  Text 可以显示多行文本，那么可以这样做，使其具有特定的行数:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Hello world&amp;quot;)
    .lineLimit(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 请注意 &lt;code&gt;lineLimit(3)&lt;/code&gt; 位于 &lt;code&gt;Text(&amp;quot;Hello World&amp;quot;)&lt;/code&gt; 下方靠右侧的方式。这不是必需的，但它确实使您的代码更易于阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或者，可以将 &lt;code&gt;nil&lt;/code&gt; 指定给 &lt;code&gt;lineLimit()&lt;/code&gt; 方法，该方法允许它根据需要运行在任意多行:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Hello World&amp;quot;)
    .lineLimit(nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 这里设置 &lt;code&gt;lineLimit(0)&lt;/code&gt; 不能实现多行显示，这一点跟 UIKit 中是不一样的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-文本截断&#34;&gt;3. 文本截断&lt;/h3&gt;

&lt;p&gt;我们也可以调整 SwiftUI 截断文本的方式，而不是调整行数。默认情况下，从末尾删除文本并显示省略号，但也可以将省略号放在中间或开头，具体取决于字符串各个部分的重要程度。&lt;/p&gt;

&lt;p&gt;例如: 以下代码会在中间截断文本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones.&amp;quot;)
    .truncationMode(.middle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不管我们如何截断文本，我们将看到文本视图始终位于主视图（main view）的中心。这是 SwiftUI 的默认行为 &amp;ndash; 除非我们明确告诉 SwiftUI 将视图定位到其他位置，否则 SwiftUI 会将视图定位到相对于屏幕中心的位置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.1 工程模板介绍</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.1_%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 23 Jul 2019 15:51:58 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.1_%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;!-- more --&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 您可能认为本章完全可以跳过，但除非你是一个 Swift 天才，否则你应该读到最后再确定。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;img/swiftui_project_template.png&#34; alt=&#34;swiftui_project_template&#34; /&gt;
如图，自 Xcode 11 之后，基本的 &lt;em&gt;Single View App&lt;/em&gt; 模板为我们提供以下内容:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AppDelegate.swift&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;这个文件负责监视外部事件。例如，如果另一个应用程序试图向您发送要打开的文件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SceneDelegate.swift&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;这个文件负责管理应用程序的显示方式。例如让多个实例同时运行，或者当一个实例移动到后台时采取操作。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContentView.swift&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;这个文件是我们的初始用户界面。如果这是一个 UIKit 项目，这个文件相当于是 Xcode 提供给我们的 &lt;em&gt;ViewController&lt;/em&gt; 类。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets.xcassets&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;这个文件是项目的资产目录。存储着我们项目中使用的所有图像和颜色。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LaunchScreen.storyboard&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;这是应用加载时显示的屏幕。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Info.plist&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;这是一个属性列表文件，在本例中，它用于存储应用程序的系统级设置。例如，应该在 iOS 主屏幕的图标下面显示什么名称。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Preview content&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;一个名为 &lt;em&gt;Preview content&lt;/em&gt; 的组，其中包含另一个名为 &lt;em&gt;Preview Assests&lt;/em&gt; 的资产目录。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就是这样 - 这是一个令人愉快的少量代码和资源，这意味着我们可以在此基础上进行构建。&lt;/p&gt;

&lt;p&gt;我们真正关心的是 &lt;code&gt;ContentView.swift&lt;/code&gt;，  事实上，这是唯一重要的部分。这是我们应用程序的主要功能，在这里我们可以立即开始尝试各种 &lt;code&gt;SwiftUI&lt;/code&gt; 代码。&lt;/p&gt;

&lt;p&gt;首先，是什么让 &lt;code&gt;ContentView.swift&lt;/code&gt; 显示在屏幕上？&lt;br /&gt;
好吧，如果你还记得我说过 &lt;code&gt;SceneDelegate.swift&lt;/code&gt;  负责管理应用程序的显示方式。那么，继续打开 &lt;code&gt;SceneDelegate.swift&lt;/code&gt;，您会看到下面的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let window = UIWindow(windowScene: windowScene)
window.rootViewController = UIHostingController(rootView: ContentView())
self.window = window
window.makeKeyAndVisible()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码创建了一个新的 &lt;code&gt;ContentView&lt;/code&gt; 实例（这是我们即将看到的主要功能），并将其放在 &lt;code&gt;window&lt;/code&gt; 中，以便在屏幕上显示。它通过显示 &lt;code&gt;ContentView&lt;/code&gt; 的第一个实例，可以有效地引导我们的应用程序，并从那里结束 - 你想做什么？&lt;/p&gt;

&lt;p&gt;打开  &lt;code&gt;ContentView.swift&lt;/code&gt; ，让我们看看实际的 SwiftUI 代码。您应该看到这样的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI

struct ContentView : View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
    }
}

#if DEBUG
struct ContentView_Previews : PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这不是很多代码，但它确实包含了大量代码。&lt;/p&gt;

&lt;p&gt;首先，请注意，&lt;code&gt;ContentView&lt;/code&gt; 是一个结构体（struct）。熟悉 UIKit 的开发人员知道 - 我们从用户界面的所有值类型的不可变性和简单性中获益巨大！不熟悉 UIKit 的人&amp;hellip; 嗯，只是点头微笑 - 你从来不知道我们曾经的痛苦。&lt;/p&gt;

&lt;p&gt;其次，&lt;code&gt;ContentView&lt;/code&gt; 符合 &lt;code&gt;View&lt;/code&gt; 协议。你想在 SwiftUI 中显示的所有内容都需要符合 &lt;code&gt;View&lt;/code&gt;，这实际上只意味着一件事: 你需要一个名为 body 的属性来返回某种 View。&lt;/p&gt;

&lt;p&gt;第三，&lt;code&gt;body&lt;/code&gt; 的返回类型是 &lt;code&gt;some View&lt;/code&gt;。&lt;code&gt;some&lt;/code&gt; 关键字是在 Swift 5.1 中新增的，是一个名为 &lt;em&gt;不透明返回类型（opaque return types）&lt;/em&gt; 的功能的一部分，在这种情况下，它的意思是 &lt;em&gt;将返回某种视图，但 SwiftUI 不需要知道（或关心）什么。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重要说明:&lt;/strong&gt; 返回 &lt;code&gt;some View&lt;/code&gt; 意味着 &lt;code&gt;body&lt;/code&gt; 属性将返回符合 &lt;code&gt;View&lt;/code&gt; 协议的内容。你不能返回很多东西或忘记返回任何东西 &amp;ndash; Swift 编译器将拒绝构建你的代码。要清楚，您的视图正文必须返回一个子视图。&lt;/p&gt;

&lt;p&gt;第四，body属性中有 &lt;code&gt;Text(&amp;quot;hello world&amp;quot;)&lt;/code&gt;，它创建了文本内容为 “hello world”的标签。&lt;/p&gt;

&lt;p&gt;最后，在 ContentView 下面的是一个类似但不同的 struct，称为 &lt;code&gt;ContentView_Previews&lt;/code&gt;。它不符合 &lt;code&gt;View&lt;/code&gt; 协议，因为它专门用于在 Xcode 中显示 视图预览（Preview），而不是在真实 app 中显示在屏幕上。这就是为什么你会看到它在 &lt;code&gt;#if DEBUG&lt;/code&gt; 和 &lt;code&gt;#endif&lt;/code&gt; 之间 - 当我们的应用程序在调试环境中运行时，这段代码只构建在 *成品（finished product）*中，因为它在生产应用程序（Production app）中没有意义。&lt;/p&gt;

&lt;p&gt;我们很快就会更详细地看一下这些组件（components），但首先让我们看一下 &lt;code&gt;Text&lt;/code&gt; 组件。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
