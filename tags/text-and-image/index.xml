<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Text and image on M X</title>
    <link>https://coderxdlee.github.io/tags/text-and-image/</link>
    <description>Recent content in Text and image on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Wed, 24 Jul 2019 15:46:29 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/text-and-image/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.9_如何使用图像和其它视图作为背景</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E5%92%8C%E5%85%B6%E5%AE%83%E8%A7%86%E5%9B%BE%E4%BD%9C%E4%B8%BA%E8%83%8C%E6%99%AF/</link>
      <pubDate>Wed, 24 Jul 2019 15:46:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E5%92%8C%E5%85%B6%E5%AE%83%E8%A7%86%E5%9B%BE%E4%BD%9C%E4%B8%BA%E8%83%8C%E6%99%AF/</guid>
      <description>

&lt;p&gt;我们可以使用相同的 &lt;code&gt;background()&lt;/code&gt; 修饰符来设置背景图像，而不是设置背景颜色。&lt;/p&gt;

&lt;h3 id=&#34;1-给文本视图设置图像背景&#34;&gt;1. 给文本视图设置图像背景&lt;/h3&gt;

&lt;p&gt;例如: 现在，我们要创建一个大字体的文本视图，然后在其后面放置一个 &lt;code&gt;100x100 的图像&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .font(.largeTitle)
            .background(
                Image(&amp;quot;example-image&amp;quot;)
                    .resizable()
                    .frame(width: 100, height: 100)
            )
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/background_image.png&#34; alt=&#34;background_image&#34; title=&#34;Set background with image&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-给文本视图设置一个红色圆圈作为背景&#34;&gt;2. 给文本视图设置一个红色圆圈作为背景&lt;/h3&gt;

&lt;p&gt;在 SwiftUI 中，背景 View 并不一定是一个图像，实际上我们可以使用任何类型的视图作为背景。
例如: 现在将创建相同的文本视图，然后在其后面放置一个 &lt;code&gt;200x200 的红色圆圈&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    // 红色圆圈作背景
    Text(&amp;quot;Hello SwiftUI&amp;quot;)
        .font(.largeTitle)
        .background(
            Circle()
                .fill(Color.red)
                .frame(width: 200, height: 200)
        )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认情况下，背景视图会自动占用尽可能多的空间以完全可见，但如果需要，可以使用 &lt;code&gt;clipped(&lt;/code&gt;) 修饰符将其剪裁为父视图的大小：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    // 红色圆圈作背景
    Text(&amp;quot;Hello SwiftUI&amp;quot;)
        .font(.largeTitle)
        .background(
            Circle()
                .fill(Color.red)
                .frame(width: 200, height: 200)
                .clipped()
        )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/background_red_circle.png&#34; alt=&#34;background_red_circle&#34; title=&#34;Set background with a red circle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;明确地说，您可以使用任何视图作为背景，例如，如果需要，可以使用另一个文本视图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.8_如何显示几何形状</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.8_%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6/</link>
      <pubDate>Wed, 24 Jul 2019 15:46:01 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.8_%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6/</guid>
      <description>

&lt;p&gt;如果我们想在应用程序中使用简单地几何形状，我们可以直接创建它们，然后根据需要对它们进行着色和定位。&lt;/p&gt;

&lt;h3 id=&#34;1-矩形&#34;&gt;1. 矩形&lt;/h3&gt;

&lt;p&gt;例如，如果我们想要一个 &lt;code&gt;200x200&lt;/code&gt; 红色矩形，可以使用如下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Rectangle()
        .fill(Color.red)
        .frame(width: 200, height: 200)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/square_red_wh200.png&#34; alt=&#34;square_red_wh200&#34; title=&#34;Square: 200 x 200&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-圆&#34;&gt;2. 圆&lt;/h3&gt;

&lt;p&gt;同样，如果你想要一个 &lt;code&gt;50x50&lt;/code&gt; 的蓝色圆圈，您可以使用如下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Circle()
        .fill(Color.blue)
        .frame(width: 50, height: 50)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/circle_blue_r50.png&#34; alt=&#34;circle_blue_r50&#34; title=&#34;Circle: 50 x 50&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.7_如何渲染渐变</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.7_%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E6%B8%90%E5%8F%98/</link>
      <pubDate>Wed, 24 Jul 2019 15:45:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.7_%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E6%B8%90%E5%8F%98/</guid>
      <description>

&lt;p&gt;SwiftUI 为我们提供了各种渐变选项（gradient options），所有这些选项都可以以各种方式来使用。例如:&lt;/p&gt;

&lt;h3 id=&#34;1-垂直线性渐变&#34;&gt;1. 垂直线性渐变&lt;/h3&gt;

&lt;p&gt;我们使用从白色到黑色的线性渐变来渲染文本视图，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Text(&amp;quot;Hello World&amp;quot;)
        .padding()
        .foregroundColor(.white)
        .background(LinearGradient(gradient: Gradient(colors: [.white, .black]), startPoint: .top, endPoint: .bottom), cornerRadius: 0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/gradient_vertical_white_black.png&#34; alt=&#34;gradient_vertical_white_black&#34; title=&#34;vertical gradient: white -&amp;gt; black&#34; /&gt;&lt;/p&gt;

&lt;p&gt;颜色被指定为一个数组，我们可以设置任意多我们想要的颜色 - 默认情况下，SwiftUI 将会平均分配这些颜色。所以，我们也可以这样从 白色 -&amp;gt; 红色 -&amp;gt; 黑色 来设置:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Text(&amp;quot;Hello World&amp;quot;)
        .padding()
        .foregroundColor(.white)
        .background(LinearGradient(gradient: Gradient(colors: [.white, .red, .black]), startPoint: .top, endPoint: .bottom), cornerRadius: 0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/gradient_vertical_white_red_black.png&#34; alt=&#34;gradient_vertical_white_red_black&#34; title=&#34;vertical gradient: white -&amp;gt; red -&amp;gt; black&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-水平线性渐变&#34;&gt;2. 水平线性渐变&lt;/h3&gt;

&lt;p&gt;要实现一个水平渐变（a horizontal gradient）而不是一个垂直渐变（a vertical one），使用 &lt;code&gt;.leading&lt;/code&gt; 和 &lt;code&gt;.trailing&lt;/code&gt; 来作为 &lt;em&gt;startPoint&lt;/em&gt; 和 &lt;em&gt;endPoint&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Text(&amp;quot;Hello World&amp;quot;)
       .padding()
       .foregroundColor(.white)
       .background(LinearGradient(gradient: Gradient(colors: [.white, .red, .black]), startPoint: .leading, endPoint: .trailing), cornerRadius: 0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/gradient_horizontal_white_red_black.png&#34; alt=&#34;gradient_horizontal_white_red_black&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-对角线线性渐变&#34;&gt;3. 对角线线性渐变&lt;/h3&gt;

&lt;p&gt;要实现对角线渐变，可以使用 &lt;code&gt;.topLeading&lt;/code&gt; 和 &lt;code&gt;.bottomTrailing&lt;/code&gt; 作为 &lt;em&gt;startPoint&lt;/em&gt; 和 &lt;em&gt;endPoint&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Text(&amp;quot;Hello World&amp;quot;)
        .padding()
        .foregroundColor(.white)
        .background(LinearGradient(gradient: Gradient(colors: [.white, .red, .black]), startPoint: .topLeading, endPoint: .bottomTrailing), cornerRadius: 0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/gradient_diagonal.png&#34; alt=&#34;gradient_diagonal&#34; title=&#34;diagonal gradient: white -&amp;gt; red -&amp;gt; black &#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.6_如何调整图像视图的填充模式</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.6_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 24 Jul 2019 15:45:07 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.6_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;img/ba_xian_tai.png&#34; alt=&#34;ba_xian_tai&#34; /&gt;
SwiftUI 的 &lt;code&gt;Image&lt;/code&gt; 能够以不同的方式进行缩放，就像 &lt;code&gt;UIImageView&lt;/code&gt; 的 &lt;em&gt;content mode&lt;/em&gt; 一样。&lt;/p&gt;

&lt;h3 id=&#34;1-默认&#34;&gt;1.默认&lt;/h3&gt;

&lt;p&gt;默认情况下，图像视图会自动调整其内容的大小，这可能会使它们超出屏幕。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(&amp;quot;ba_xian_tai&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/the_default_content_mode.png&#34; alt=&#34;the_default_content_mode&#34; title=&#34;default content mode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果添加了 &lt;code&gt;resizable()&lt;/code&gt; 修饰符，则图像将自动调整大小，以填充所有可用空间:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(&amp;quot;ba_xian_tai&amp;quot;)
    .resizable()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/resizable_image.png&#34; alt=&#34;resizable_image&#34; title=&#34;resizable image&#34; /&gt;
然而，这也可能导致图像的原始纵横比失真，因为它将在所有维度上被拉伸任意数量，以使其填充空间。&lt;/p&gt;

&lt;h3 id=&#34;2-fill-和-fit&#34;&gt;2. .fill 和 .fit&lt;/h3&gt;

&lt;p&gt;如果要保持其纵横比，应使用 &lt;code&gt;.fill&lt;/code&gt; 或 &lt;code&gt;.fit&lt;/code&gt;添加一个&lt;code&gt;aspectRatio()&lt;/code&gt;修饰符，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(&amp;quot;ba_xian_tai&amp;quot;)
    .resizable()
    .aspectRatio(contentMode: .fill)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/fill_content_mode.png&#34; alt=&#34;fill_content_mode&#34; title=&#34;content mode = .fill&#34; /&gt;
&lt;img src=&#34;img/fit_content_mode.png&#34; alt=&#34;fit_content_mode&#34; title=&#34;content mode = .fit&#34; /&gt;
注意: 在当前的测试版中，有一个bug，&lt;code&gt;.fit&lt;/code&gt; 内容模式仍然会导致图像被拉伸。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.5_如何使用图像视图绘制图像</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.5_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Wed, 24 Jul 2019 15:44:15 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.5_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%83%8F%E8%A7%86%E5%9B%BE%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F/</guid>
      <description>

&lt;p&gt;使用图像视图 &lt;code&gt;Image&lt;/code&gt; 可以在 SwiftUI 布局中渲染图像（images）。我们可以从 &lt;code&gt;Bundle&lt;/code&gt;、&lt;code&gt;System icons&lt;/code&gt;、&lt;code&gt;UIImage&lt;/code&gt; 等中加载图像，但这三个将是最常见的。&lt;/p&gt;

&lt;h3 id=&#34;1-从-bundle-加载&#34;&gt;1. 从 Bundle 加载&lt;/h3&gt;

&lt;p&gt;要从 Bundle 中加载图像并将其显示在图像视图中，只需使用以下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Image(&amp;quot;example-image&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/load_image_from_bundle.png&#34; alt=&#34;load_image_from_bundle&#34; title=&#34;load image from buldle&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-从-system-icons-加载&#34;&gt;2. 从 System icons 加载&lt;/h3&gt;

&lt;p&gt;要从苹果旧金山符号集(Apple’s San Francisco Symbol set)中加载图标，请使用 &lt;code&gt;Image(systemName: )&lt;/code&gt; 初始化器，传入图标字符串进行加载，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(systemName: &amp;quot;cloud.heavyrain.fill&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/load_image_from_systemicon.png&#34; alt=&#34;load_image_from_systemicon&#34; title=&#34;load image from system icons&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-从-uiimage-加载&#34;&gt;3. 从 UIImage 加载&lt;/h3&gt;

&lt;p&gt;最后，可以从现有的 UIImage 创建一个图像视图。因为这需要更多的代码，所以需要显式地使用 return 关键字。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let image = UIImage(named: &amp;quot;example-image&amp;quot;) else {
    fatalError(&amp;quot;Unable to load image&amp;quot;)
}

return Image(uiImage: image)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/load_image_from_uiimage.png&#34; alt=&#34;load_image_from_uiimage&#34; title=&#34;load image from uiimage&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-foregroundcolor&#34;&gt;4. foregroundColor&lt;/h3&gt;

&lt;p&gt;如果你使用的是 系统图标集，则返回的图像是 &lt;code&gt;可缩放&lt;/code&gt; 和 &lt;code&gt;可着色&lt;/code&gt; 的，这意味着你可以使用 &lt;code&gt;foregroundColor()&lt;/code&gt; 修改器对图像着色。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(systemName: &amp;quot;cloud.heavyrain.fill&amp;quot;)
    .foregroundColor(.red)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/foreground_color_image.png&#34; alt=&#34;foreground_color_image&#34; title=&#34;set foreground color for system icon&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-动态文本样式&#34;&gt;5. 动态文本样式&lt;/h3&gt;

&lt;p&gt;这意味着你可以通过匹配任何 &lt;code&gt;Dynamic Type&lt;/code&gt; 文本样式，来要求 SwiftUI 放大图像:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(systemName: &amp;quot;cloud.heavyrain.fill&amp;quot;)
    .font(.largeTitle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/font_largetitle_image.png&#34; alt=&#34;font_largetitle_image&#34; title=&#34;set font as largeTitle for system icons&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.4_如何格式化文本视图中的文本</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.4_%E5%A6%82%E4%BD%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</link>
      <pubDate>Wed, 24 Jul 2019 15:43:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.4_%E5%A6%82%E4%BD%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC/</guid>
      <description>&lt;p&gt;SwiftUI 的文本视图有一个可选的 &lt;code&gt;formatter&lt;/code&gt; 参数，可以让我们用来自定义数据在标签（label）内的显示方式。这一点很重要，因为在我们的程序中发生某些事情时，通常会为我们更新值，因此通过附加 &lt;code&gt;formatter&lt;/code&gt;， SwiftUI 可以确保我们的数据以我们期望的方式来正确显示。&lt;/p&gt;

&lt;p&gt;例如，这定义了一个日期格式（date formatter）化程序，并使用它来确保 任务日期 以人类可读的形式显示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI

struct ContentView : View {
    
    static let taskDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .long
        return formatter
    }()
    
    var dueDate = Date()
    
    var body: some View {
        Text(&amp;quot;Task due date: \(dueDate, formatter: Self.taskDateFormatter)&amp;quot;)
    }
}

#if DEBUG
struct ContentView_Previews : PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/date_formatter_text.png&#34; alt=&#34;date_formatter&#34; title=&#34;date formatter&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.3_如何使用字体颜色行距等设置文本视图的样式</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.3_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%A1%8C%E8%B7%9D%E7%AD%89%E8%AE%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E7%9A%84%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Wed, 24 Jul 2019 15:42:28 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.3_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%A1%8C%E8%B7%9D%E7%AD%89%E8%AE%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE%E7%9A%84%E6%A0%B7%E5%BC%8F/</guid>
      <description>

&lt;!-- more --&gt;

&lt;p&gt;&lt;code&gt;Text&lt;/code&gt; 不仅在外观方面可以让我们进行可预测的广泛控制，而且它们还可以与 &lt;code&gt;Dynamic Type&lt;/code&gt; 等 Apple 的核心技术无缝协作。&lt;/p&gt;

&lt;h3 id=&#34;1-设置字体&#34;&gt;1. 设置字体&lt;/h3&gt;

&lt;p&gt;默认情况下，文本视图有一个 &lt;code&gt;Body&lt;/code&gt; 动态类型样式，但是我们可以通过以下方式调用 &lt;code&gt;.font()&lt;/code&gt;，从其它 &lt;em&gt;sizes&lt;/em&gt; 和 &lt;em&gt;weights&lt;/em&gt; 进行选择:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 1. 设置字体
        Text(&amp;quot;This is an extremely long text string that will never fit even the widest of Phones&amp;quot;)
            .font(.largeTitle)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.3_text_font_large_title.png&#34; alt=&#34;1.3_text_font_large_title&#34; title=&#34;Set a font for text&#34; /&gt;
我们现在在文本视图下面使用了两个修改器，这没关系 - 你可以将它们堆叠起来，并且它们都会生效。&lt;/p&gt;

&lt;h3 id=&#34;2-设置文本对齐方式&#34;&gt;2. 设置文本对齐方式&lt;/h3&gt;

&lt;p&gt;特别是，现在我们有多行文本，我们需要调整文本的对齐方式，使其居中，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 2.设置文本对齐方式
        Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones&amp;quot;)
            .font(.largeTitle)
            .multilineTextAlignment(.center)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.3_text_alignment_center.png&#34; alt=&#34;1.3_text_alignment_center&#34; title=&#34;Set center alignment for text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-设置字体颜色&#34;&gt;3. 设置字体颜色&lt;/h3&gt;

&lt;p&gt;我们可以通过 &lt;code&gt;.foregroundColor()&lt;/code&gt; 修改器来设置文本颜色，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 3. 设置字体颜色
        Text(&amp;quot;The best laid plans&amp;quot;)
            .foregroundColor(.red)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.3_text_foregroundcolor.png&#34; alt=&#34;1.3_text_foregroundcolor&#34; title=&#34;Set a foreground color for text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-背景&#34;&gt;4. 背景&lt;/h3&gt;

&lt;p&gt;我们可以使用 &lt;code&gt;.background()&lt;/code&gt; 来设置背景颜色，但是它不仅仅可以用来设置背景颜色，也可以设置背景视图。无论如何，为了给我们的文本视图设置一个黄色背景，代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 4. 设置背景颜色
        Text(&amp;quot;The best laid plans&amp;quot;)
            .foregroundColor(.red)
            .background(Color.yellow)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.3_text_backgroundcolor.png&#34; alt=&#34;1.3_text_backgroundcolor&#34; title=&#34;Set a background color for text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-设置行间距&#34;&gt;5. 设置行间距&lt;/h3&gt;

&lt;p&gt;我们可以设置多行文本的行间距，行间距默认值为0，表示没有额外的行间距，但是我们可以通过以下方式在行与行之间指定一个值来添加额外的行间距。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 5.设置行间距
        Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones&amp;quot;)
            .lineLimit(nil)
            .font(.largeTitle)
            .lineSpacing(50)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.3_text_line_spacing.png&#34; alt=&#34;1.3_text_line_spacing&#34; title=&#34;Set a line spacing for text&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.2_如何使用 Text 创建静态标签</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.2_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-text-%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 24 Jul 2019 13:35:01 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.2_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-text-%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E6%A0%87%E7%AD%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Text&lt;/code&gt; 主要用于在屏幕上显示静态文本，相当于 UIKit 中的 &lt;code&gt;UILabel&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;2-基本用法&#34;&gt;2. 基本用法&lt;/h3&gt;

&lt;p&gt;最基本的用法如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;ContentView&lt;/code&gt; 的预览窗口中，我们可能会看到 &lt;code&gt;Automatic preview updating paused&lt;/code&gt;， 继续按 &lt;code&gt;Resume&lt;/code&gt; 以让 Swift 开始构建代码并向我们展示 &lt;code&gt;ContentView&lt;/code&gt; 外观的实时预览。&lt;/p&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.2_automatic_preview_updating_paused.png&#34; alt=&#34;1.2_automatic_preview_updating_paused&#34; title=&#34;Automatic preview updating paused, need to resume.&#34; /&gt;
&lt;img src=&#34;img/1.2_text_hello_world.png&#34; alt=&#34;1.2_text_hello_world&#34; title=&#34;Hello world&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-设置显示行数&#34;&gt;3. 设置显示行数&lt;/h3&gt;

&lt;p&gt;默认情况下，Text 视图会根据需要自动换行(包含尽可能多的行)，但是如果我们更希望限制它们可以使用的行数，则应该添加 &lt;code&gt;lineLimit&lt;/code&gt; 修改器，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;Hello world&amp;quot;)
    .lineLimit(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;: 请注意 &lt;code&gt;lineLimit(3)&lt;/code&gt; 位于 &lt;code&gt;Text(&amp;quot;Hello World&amp;quot;)&lt;/code&gt; 下方靠右侧的方式。这不是必需的，但从长远来看，它确实使我们的代码更易于阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果对某些文本设置行限制，然后为其提供一个太长而不适合可用空间的字符串，SwiftUI将截断文本，使其以 &lt;code&gt;...&lt;/code&gt; 结尾。&lt;/p&gt;

&lt;p&gt;或者，我们可以为 &lt;code&gt;lineLimit()&lt;/code&gt; 方法指定 &lt;code&gt;nil&lt;/code&gt;，这样就允许它根据需要运行任意多行:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones.&amp;quot;)
    .lineLimit(nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.2_text_line_limit_nil.png&#34; alt=&#34;1.2_text_line_limit_nil&#34; title=&#34;lineLimit = nil&#34; /&gt;
&amp;gt; &lt;strong&gt;注意:&lt;/strong&gt; 这里设置 &lt;code&gt;lineLimit(0)&lt;/code&gt; 不能实现多行显示，这一点跟 UIKit 中是不一样的。&lt;/p&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.2_text_line_limit_0.png&#34; alt=&#34;1.2_text_line_limit_0&#34; title=&#34;lineLimit = 0&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-文本截断&#34;&gt;4. 文本截断&lt;/h3&gt;

&lt;p&gt;我们也可以调整 SwiftUI 截断文本的方式: 默认情况下，从末尾删除文本并在那里显示省略号，但也可以将省略号放在中间或开头，具体取决于字符串各个部分的重要程度。&lt;/p&gt;

&lt;p&gt;例如: 以下代码会在中间截断文本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&amp;quot;This is an extremely long string that will never fit even the widest of Phones.&amp;quot;)
    .lineLimit(0)
    .truncationMode(.middle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/1.2_text_truncation_mode_middle.png&#34; alt=&#34;1.2_text_truncation_mode_middle&#34; title=&#34;truncationMode = middle&#34; /&gt;
不管我们如何截断文本，我们将看到文本视图始终位于主视图（main view）的中心。这是 SwiftUI 的默认行为 &amp;ndash; 除非我们明确告诉 SwiftUI 将视图定位到其它位置，否则 SwiftUI 会将视图定位到相对于屏幕中心的位置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.1_工程模板介绍</title>
      <link>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.1_%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 23 Jul 2019 15:51:58 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/1-text_and_image/1.1_%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;img/1.1_swiftui_basic_template.png&#34; alt=&#34;1.1_swiftui_basic_template&#34; /&gt;
如图，自 Xcode 11 之后，基本的 单一视图应用程序(Single View App)模板 为我们提供以下内容:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AppDelegate.swift&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;它负责监视外部事件。&lt;/li&gt;
&lt;li&gt;例如: 如果另一个应用程序试图向我们发送要一个要打开的文件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SceneDelegate.swift&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;它负责管理应用程序的显示方式。&lt;/li&gt;
&lt;li&gt;例如: 让多个实例同时运行，或者当一个实例移动到后台时采取操作/措施。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContentView.swift&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;它是我们最初的用户界面。&lt;/li&gt;
&lt;li&gt;如果这是一个 UIKit 项目，它就相当于 Xcode 提供给我们的 &lt;strong&gt;ViewController&lt;/strong&gt; 类。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets.xcassets&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;它是项目的资产目录。&lt;/li&gt;
&lt;li&gt;存储着我们项目中使用的所有图像和颜色。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LaunchScreen.storyboard&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;它是在我们的应用加载时显示的屏幕。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Info.plist&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;它是一个属性列表文件，用于存储应用程序的系统级设置。&lt;/li&gt;
&lt;li&gt;例如: 应该在 iOS 主屏幕上的图标下面显示什么名称。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Preview content&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;它是一个名为 &lt;strong&gt;Preview content&lt;/strong&gt; 的组，其中包含另一个名为 &lt;strong&gt;Preview Assests&lt;/strong&gt; 的资产目录。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就是这样 - 只有少量的代码和资源，这意味着我们可以在此基础上进行构建。&lt;/p&gt;

&lt;h3 id=&#34;2-查看-scenedelegate&#34;&gt;2. 查看 SceneDelegate&lt;/h3&gt;

&lt;p&gt;事实上，我们真正关心的、也是唯一重要的部分是 &lt;code&gt;ContentView.swift&lt;/code&gt;。这是我们应用程序的主要功能，在这里我们可以立即开始尝试各种 &lt;code&gt;SwiftUI&lt;/code&gt; 代码。&lt;/p&gt;

&lt;p&gt;不过，我们首先要弄清楚的是: 是什么让 &lt;em&gt;ContentView.swift&lt;/em&gt; 显示在屏幕上?
上面我们提到: &lt;code&gt;SceneDelegate.swift&lt;/code&gt; 负责管理应用程序的显示方式。那么，我们打开 &lt;code&gt;SceneDelegate.swift&lt;/code&gt;，就会看到下面的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create the SwiftUI view that provides the window contents.
let contentView = ContentView()

// Use a UIHostingController as window root view controller.
if let windowScene = scene as? UIWindowScene {
    let window = UIWindow(windowScene: windowScene)
    window.rootViewController = UIHostingController(rootView: contentView)
    self.window = window
    window.makeKeyAndVisible()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码创建了一个新的 &lt;code&gt;ContentView&lt;/code&gt; 实例（这是我们即将看到的主要功能），并将其放置在窗口中，以便在屏幕上显示。通过显示 &lt;code&gt;ContentView&lt;/code&gt; 的第一个实例，可以有效地引导我们的应用程序，并从那里结束 - 那么接下来你想做什么？&lt;/p&gt;

&lt;h3 id=&#34;3-查看-contentview&#34;&gt;3. 查看 ContentView&lt;/h3&gt;

&lt;p&gt;打开  &lt;code&gt;ContentView.swift&lt;/code&gt; ，让我们看看一些实际的 SwiftUI 代码。我们应该可以看到这样的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI

struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这不是很多代码，但它实际上包含了大量代码。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，请注意，&lt;code&gt;ContentView&lt;/code&gt; 是一个结构体。熟悉 UIKit 的开发人员都知道 - 我们从用户界面的所有值类型的不变性和简单性中获益巨大！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其次，&lt;code&gt;ContentView&lt;/code&gt; 遵守 &lt;code&gt;View&lt;/code&gt; 协议。我们想在 SwiftUI 中显示的所有内容都需要遵守 &lt;code&gt;View&lt;/code&gt; 协议，这实际上只意味着一件事: 我们需要一个名为 &lt;code&gt;body&lt;/code&gt; 的属性来返回 &lt;code&gt;some View&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三，&lt;code&gt;body&lt;/code&gt; 的返回类型是 &lt;code&gt;some View&lt;/code&gt;。&lt;code&gt;some&lt;/code&gt; 关键字是在 Swift 5.1 中新引入的，是一个名为 &lt;strong&gt;不透明返回类型（opaque return types）&lt;/strong&gt; 功能的一部分，在这种情况下，它的意思是 将返回某种视图，但 SwiftUI 不需要知道（或关心）什么。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;重要说明:&lt;/strong&gt; 返回 &lt;code&gt;some View&lt;/code&gt; 意味着 &lt;code&gt;body&lt;/code&gt; 属性将返回遵守 &lt;code&gt;View&lt;/code&gt; 协议的内容。我们不能返回很多东西或忘记返回任何东西，否则，Swift 编译器将拒绝构建我们的代码。为了清楚起见，我们的视图 body 必须始终返回一个子视图。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第四，body 属性中有 &lt;code&gt;Text(&amp;quot;hello world&amp;quot;)&lt;/code&gt;，它创建了文本内容为 &amp;ldquo;hello world&amp;rdquo; 的标签。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后，在 ContentView 下面的是一个类似但不同的 struct，称为 &lt;code&gt;ContentView_Previews&lt;/code&gt;。它不遵守 &lt;code&gt;View&lt;/code&gt; 协议，因为它专门用于在 Xcode 中显示 视图预览（Preview），而不是在真正的应用程序中显示在屏幕上。这就是为什么你会看到它在 &lt;code&gt;#if DEBUG&lt;/code&gt; 和 &lt;code&gt;#endif&lt;/code&gt; 之间 - 当我们的应用程序在调试环境中运行时，这段代码只构建在 成品（finished product）中，因为它在生产应用程序（Production app）中没有意义。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
