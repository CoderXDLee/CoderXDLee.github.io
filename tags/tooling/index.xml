<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tooling on M X</title>
    <link>https://coderxdlee.github.io/tags/tooling/</link>
    <description>Recent content in Tooling on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Thu, 08 Aug 2019 09:42:15 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>13.3_如何在不同设备中预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.3_%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%AD%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 08 Aug 2019 09:42:15 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.3_%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%AD%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;Xcode 的 SwiftUI 预览允许我们使用 &lt;code&gt;.previewDevice()&lt;/code&gt; 修改器同时以多种屏幕尺寸显示我们的设计。 这需要提供设备的确切名称，如 Xcode 的目的地菜单中所示，例如， &amp;ldquo;iPhone XS Max&amp;rdquo;。&lt;/p&gt;

&lt;h3 id=&#34;2-在-iphone-se-上预览&#34;&gt;2. 在 iPhone SE 上预览&lt;/h3&gt;

&lt;p&gt;例如，下面代码显示了 iPhone SE上的预览:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .background(Color.red)
    }
}

#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
           ContentView()
              .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone SE&amp;quot;))
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.3_preview_in_device_iphonese_without_devicename.png&#34; alt=&#34;13.3_preview_in_device_iphonese&#34; title=&#34;&amp;quot;Preview in iPhone SE without device name&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-显示设备名称&#34;&gt;3. 显示设备名称&lt;/h3&gt;

&lt;p&gt;使用特定设备进行预览时，我们可能会发现添加 &lt;code&gt;.previewDisplayName()&lt;/code&gt; 修改器非常有用，它允许我们在预览窗口中的设备下添加名称。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .background(Color.red)
    }
}

#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
           ContentView()
              .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone SE&amp;quot;))
              .previewDisplayName(&amp;quot;iPhone SE&amp;quot;)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.3_preview_in_device_iphonese_with_devicename.png&#34; alt=&#34;13.3_preview_in_device_iphonese_with_devicename&#34; title=&#34;Preview in iPhone SE with device name&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-创建多个设备的预览&#34;&gt;4. 创建多个设备的预览&lt;/h3&gt;

&lt;p&gt;例如，下面代码会为两个不同的设备创建两个预览，添加每个设备的名称以明确发生了什么:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .background(Color.red)
    }
}

#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone SE&amp;quot;))
                .previewDisplayName(&amp;quot;iPhone SE&amp;quot;)
            ContentView()
                .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone XS Max&amp;quot;))
                .previewDisplayName(&amp;quot;iPhone XS Max&amp;quot;)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>13.2_如何在light和dark模式下预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.2_%E5%A6%82%E4%BD%95%E5%9C%A8light%E5%92%8Cdark%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 07 Aug 2019 18:25:14 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.2_%E5%A6%82%E4%BD%95%E5%9C%A8light%E5%92%8Cdark%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;Apple的大多数操作系统都支持亮模式和暗模式用户界面，因此 SwiftUI 内置支持此功能也就不足为奇了。&lt;/p&gt;

&lt;p&gt;更好的是，一旦我们设计了界面，Xcode 允许我们通过在预览中设置 &lt;code&gt;\.colorScheme&lt;/code&gt; 环境值来以任一颜色方案预览布局。&lt;/p&gt;

&lt;p&gt;例如，下面显示使用暗模式的预览:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews : PreviewProvider {
   static var previews: some View {
      Group {
         ContentView()
            .environment(\.colorScheme, .dark)
      }
   }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们要并排查看明暗模式，请在组中放置多个预览，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .environment(\.colorScheme, .light)
            
            ContentView()
                .environment(\.colorScheme, .dark)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.2_preview_your_layout_in_light_and_dark_mode.gif&#34; alt=&#34;13.2_preview_your_layout_in_light_and_dark_mode&#34; title=&#34;Preview your layout in light and dark mode&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提示: 如果我们的预览已缩放，则应滚动或缩小到其他预览。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>13.1_如何以不同的动态类型大小预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.1_%E5%A6%82%E4%BD%95%E4%BB%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 07 Aug 2019 18:14:51 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.1_%E5%A6%82%E4%BD%95%E4%BB%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;构建应用程序时，确保布局在所有动态类型范围内都能正常运行至关重要。 这部分是因为 SwiftUI 本身支持它，部分原因是许多人使用较小的字体大小，因为他们需要更高的信息密度，但主要是因为许多具有可访问性需求的人都依赖它。&lt;/p&gt;

&lt;p&gt;幸运的是，SwiftUI 的所有组件本身都适应动态类型大小，通过在预览中使用 &lt;code&gt;\.sizeCategory&lt;/code&gt; 环境值，可以轻松预览各种大小的设计。&lt;/p&gt;

&lt;p&gt;例如，如果我们想要查看视图如何使用额外的小文本，我们可以将 &lt;code&gt;.environment（\.size Category，.extra Small)&lt;/code&gt; 添加到内容视图预览中，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .environment(\.sizeCategory, .extraSmall)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们还可以发回一组预览，所有预览都使用不同的大小类别。 这使我们可以并排查看各种字体大小的相同设计。&lt;/p&gt;

&lt;p&gt;因此，此代码显示了超小尺寸，常规尺寸和最大尺寸的设计:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .environment(\.sizeCategory, .extraSmall)
            
            ContentView()
            
            ContentView()
            .environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.1_preview_your_layout_at_different_dynamic_type_sizes.gif&#34; alt=&#34;13.1_preview_your_layout_at_different_dynamic_type_sizes&#34; title=&#34;Preview in extraSmall, regular, accessibilityExtraExtraExtraLarge&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们的设计在所有这三个方面都很有效，那么我们很高兴。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提示: 如果我们的预览已缩放，则应滚动或缩小到其他预览。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
