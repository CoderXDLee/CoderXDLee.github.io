<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tooling on M X</title>
    <link>https://coderxdlee.github.io/tags/tooling/</link>
    <description>Recent content in Tooling on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Thu, 08 Aug 2019 10:14:06 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>13.5_如何使用Instruments来分析SwiftUI代码并识别缓慢的布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.5_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8instruments%E6%9D%A5%E5%88%86%E6%9E%90swiftui%E4%BB%A3%E7%A0%81%E5%B9%B6%E8%AF%86%E5%88%AB%E7%BC%93%E6%85%A2%E7%9A%84%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 08 Aug 2019 10:14:06 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.5_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8instruments%E6%9D%A5%E5%88%86%E6%9E%90swiftui%E4%BB%A3%E7%A0%81%E5%B9%B6%E8%AF%86%E5%88%AB%E7%BC%93%E6%85%A2%E7%9A%84%E5%B8%83%E5%B1%80/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;Xcode 的 &lt;code&gt;Instruments&lt;/code&gt; 工具为 SwiftUI 提供了一套出色的分析功能，允许我们确定重新绘制视图的频率、计算视图主体的缓慢次数，甚至可以确定状态随时间的变化情况。&lt;/p&gt;

&lt;h3 id=&#34;2-准备工作&#34;&gt;2. 准备工作&lt;/h3&gt;

&lt;p&gt;首先，我们需要一些能够提供我们在 &lt;code&gt;Instruments&lt;/code&gt; 中可以看到的有趣结果的东西。所以，这段代码创建了一个计时器，它每隔0.01秒触发一次，并且有一个显示随机UUID的Body视图和一个按钮，每当点击它时会增加它显示的值:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Combine
import SwiftUI

class FrequentUpdater: ObservableObject, Identifiable {
   var didChange = PassthroughSubject&amp;lt;Void, Never&amp;gt;()
   var timer: Timer?

   init() {
      timer = Timer.scheduledTimer(
         withTimeInterval: 0.01,
         repeats: true
      ) { _ in
         self.didChange.send(())
      }
   }
}

struct ContentView : View {
   @ObservedObject var updater = FrequentUpdater()
   @State var tapCount = 0

   var body: some View {
      VStack {
         Text(&amp;quot;\(UUID().uuidString)&amp;quot;)

         Button(action: {
            self.tapCount += 1
         }) {
            Text(&amp;quot;Tap count: \(tapCount)&amp;quot;)
         }
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们在模拟器中运行该代码，我们将看到它不断重绘，因为它的值始终在变化。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 这是一个专门设计的压力测试，旨在使 SwiftUI 做很多工作，以便 Instruments 向我们展示有趣的数据 - 我们不想在实际应用中使用上述代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-检测我们的代码&#34;&gt;3. 检测我们的代码&lt;/h3&gt;

&lt;p&gt;现在按 &lt;code&gt;Cmd + I&lt;/code&gt; 通过 Instruments 运行代码，然后选择 SwiftUI instruments。
&lt;img src=&#34;img/13.5_instruments_template.png&#34; alt=&#34;13.5_instruments_template&#34; /&gt;
出现时，按录制按钮使其启动应用程序并开始观看。 现在让它运行几秒钟，同时单击按钮十次左右，然后在仪器中按停止 - 我们有足够的数据可以使用。&lt;/p&gt;

&lt;p&gt;默认情况下，SwiftUI仪器会告诉我们很多事情:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在这段时间内创建了多少个视图以及创建这些视图需要多长时间（&amp;rdquo;View Body&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;视图的属性是什么以及它们随时间的变化（&amp;rdquo;View Properties&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;发生了多少个核心动画提交（&amp;rdquo;Core Animation Commits&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;每个函数调用所用的确切时间（&amp;rdquo;Time Profiler&amp;rdquo;）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些工具中的每一个都可以帮助我们诊断和解决 SwiftUI 应用程序中的性能问题，因此值得花时间尝试一下。&lt;/p&gt;

&lt;p&gt;对于我们的小压力测试沙箱，您将看到 &lt;code&gt;View Body&lt;/code&gt;，&lt;code&gt;View Properties&lt;/code&gt; 和 &lt;code&gt;Core Animation Commits&lt;/code&gt; 的纯色墙，这是一个直接的红旗。 它告诉我们，SwiftUI 不仅要不断重新创建我们的视图，而且我们的属性也在不断变化，因此 Core Animation 必须加班加点才能跟上。&lt;/p&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.5_instruments_swiftui.png&#34; alt=&#34;13.5_instruments_swiftui&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-监控主题调用&#34;&gt;4. 监控主题调用&lt;/h3&gt;

&lt;p&gt;如果我们选择 &lt;code&gt;View Body&lt;/code&gt; 轨道 - 这是 instruments 列表中的第一行 - 我们应该能够看到 instruments 将结果分解为 &lt;code&gt;SwiftUI&lt;/code&gt; 和 &lt;code&gt;我们的项目&lt;/code&gt;，前者是原始类型，如文本视图和按钮，后者包含我们的自定义视图类型。 在我们的例子中，这意味着 &amp;ldquo;ContentView&amp;rdquo; 应该出现在自定义视图中，因为这是我们视图的名称。&lt;/p&gt;

&lt;p&gt;现在，在这里我们将看不到一个完美的代码到 SwiftUI 视图的一对一映射，因为 SwiftUI 会积极地折叠其视图层次结构，以尽可能少地进行工作。所以，不要期望在代码中看到任何 &lt;code&gt;VStack&lt;/code&gt; 创建——这对于这个应用程序来说是免费的。&lt;/p&gt;

&lt;p&gt;在这个屏幕上，重要的数字是 &lt;code&gt;计数(Count)&lt;/code&gt;和 &lt;code&gt;平均持续时间(Avg Duration)&lt;/code&gt; - 每件事创建的次数，以及花费的时间。 因为这是一个压力测试我们应该看到非常高的数字，但我们的布局是微不足道的，所以平均持续时间可能是几十微秒。&lt;/p&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.5_instruments_monitoring_body_invocations.png&#34; alt=&#34;13.5_instruments_monitoring_body_invocations&#34; title=&#34;Monitoring body invocations&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-跟踪状态变化&#34;&gt;5. 跟踪状态变化&lt;/h3&gt;

&lt;p&gt;接下来，选择 &lt;code&gt;View Properties&lt;/code&gt; 轨道，这是 instruments 列表中的第二行。 这将显示所有视图的所有属性，包括其当前值和所有先前值。&lt;/p&gt;

&lt;p&gt;我们的示例应用程序有一个按钮，通过在数字中给一个数字加1来更改其标签，并且在此工具中可见 - 请查看视图类型 ContentView 和 属性类型 &lt;code&gt;@State&amp;lt;Int&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;遗憾的是，&lt;code&gt;Instruments&lt;/code&gt; 还没有（还能）向我们展示那里的确切属性名称，如果你跟踪了几个整数状态，这可能会更加令人困惑。然而，它确实有一个不同的技巧：在记录窗口的顶部是一个标记当前视图位置的箭头，如果你拖动它，你会看到应用程序状态随时间的变化 - 每次你点击按钮，你会看到状态整数上升一个，你可以前进和后退来看它发生。&lt;/p&gt;

&lt;p&gt;这可以解锁大量的功能，因为它可以让我们直接看到状态变化导致慢速重绘或其他工作 - 这几乎就像是在时间机器中，您可以在运行期间的每个点检查应用程序的确切状态。
&lt;img src=&#34;img/13.5_instruments_tracking_state_changes.png&#34; alt=&#34;13.5_instruments_tracking_state_changes&#34; title=&#34;Tracking state changes&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;6-识别缓慢绘制&#34;&gt;6. 识别缓慢绘制&lt;/h3&gt;

&lt;p&gt;虽然 SwiftUI 能够直接下载到 Metal 以提高性能，但大多数情况下它更喜欢使用 &lt;code&gt;Core Animation&lt;/code&gt; 进行渲染。 这意味着我们会自动从 Instruments 获取内置的 &lt;code&gt;Core Animation分析工具&lt;/code&gt;，包括检测昂贵提交的能力。&lt;/p&gt;

&lt;p&gt;当多个更改一起放入一个组（称为事务）时，Core Animation 的效果最佳。 我们在一个事务中有效地堆叠了一系列工作，然后要求CA继续渲染工作 - 称为提交事务。&lt;/p&gt;

&lt;p&gt;因此，当 Instruments 向我们展示昂贵的 Core Animation 提交时，它真正向我们展示的是SwiftUI 因为更新而被迫重绘屏幕上的像素的次数。 理论上，这应该只在我们的应用程序的实际状态导致不同的视图层次结构时发生，因为 SwiftUI 应该能够将我们的 body 属性的新输出与先前的输出进行比较。
&lt;img src=&#34;img/13.5_instruments_identifying_slow_draws.png&#34; alt=&#34;13.5_instruments_identifying_slow_draws&#34; title=&#34;Identifying slow draws&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;7-查找缓慢的函数调用&#34;&gt;7. 查找缓慢的函数调用&lt;/h3&gt;

&lt;p&gt;最后一个重要的轨道是最后一个，&lt;code&gt;Time Profiler&lt;/code&gt;，它向我们展示了在代码的每个部分花费了多少时间。 这与乐器中的常规时间分析器完全相同，但如果您之前没有尝试过，那么您至少需要知道：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;右边的扩展细节窗口显示了默认情况下最重的堆栈跟踪，这是运行时间最长的一段代码。亮代码（白色或黑色，取决于您的MacOS颜色方案）是您编写的代码；暗代码（灰色）是系统库代码。&lt;/li&gt;
&lt;li&gt;在左边，您可以看到所有创建的线程，以及让您深入到它们调用的函数和那些被调用的函数的公开指示器，等等。大部分工作将在“开始”中进行。&lt;/li&gt;
&lt;li&gt;为了避免混乱，您可能需要单击底部的调用树按钮，然后选择隐藏系统库。这只会显示您编写的代码，但是如果您的问题是您使用的系统库不好，这可能没有帮助。&lt;/li&gt;
&lt;li&gt;为了直接了解具体的细节，您还可以单击Call Tree并选择Invert Call Tree来翻转内容，这样叶子函数（位于树的末尾）就会显示在顶部，而披露指标现在可以让您向下钻取（向上钻取？）调用它们的函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然时间分析器对于识别性能问题非常有用，但通常仅查看最重的堆栈跟踪将突出显示最大的问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/13.5_instruments_looking_for_slow_function_calls.png&#34; alt=&#34;13.5_instruments_looking_for_slow_function_calls&#34; title=&#34;Looking for slow function calls&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;8-最后的提示&#34;&gt;8. 最后的提示&lt;/h3&gt;

&lt;p&gt;在您收取配置自己的代码之前，有一些事情需要注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在检查应用程序性能的一小部分时，您应该单击并拖动相关范围，以便仅查看该应用程序部分的统计信息。这使您可以专注于特定操作的性能，例如响应按下按钮。&lt;/li&gt;
&lt;li&gt;即使你在仪器中看到纯色条，它们只是从远处看起来那样 - 你可以通过按住 Cmd 并按 - 和+来查看更多细节&lt;/li&gt;
&lt;li&gt;要获得最准确的数字，请始终在真实设备上进行配置。&lt;/li&gt;
&lt;li&gt;如果要通过分析代码进行更改，请始终一次进行一项更改。如果你进行两次更改，可能会使你的性能提高20％而另一种会降低10％，但是将它们合在一起意味着你可能会认为它们整体性能提高了10％。&lt;/li&gt;
&lt;li&gt;Instruments 在发布模式下运行您的代码，从而实现 Swift 的所有优化。这也会影响您添加到代码中的任何调试标志，因此请小心。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>13.4_如何在导航视图中预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.4_%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AF%BC%E8%88%AA%E8%A7%86%E5%9B%BE%E4%B8%AD%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 08 Aug 2019 10:02:39 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.4_%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AF%BC%E8%88%AA%E8%A7%86%E5%9B%BE%E4%B8%AD%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;如果我们设计了一个视图，我们知道它将作为导航堆栈的一部分显示，但本身不包含导航视图，那么默认情况下，我们将看不到它的导航栏标题或按钮。&lt;/p&gt;

&lt;p&gt;幸运的是，我们可以将视图添加到预览中的导航视图中——这模拟了在顶部有一个导航栏，而实际上没有为实时代码添加一个导航栏，因此我们可以准确地看到它的外观。&lt;/p&gt;

&lt;p&gt;例如，此视图没有导航视图，但配置为在作为一个视图的一部分呈现时以特定方式显示 - 即从另一个视图推送:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .navigationBarTitle(Text(&amp;quot;Welcome&amp;quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要在导航视图中预览，只需在预览中的内容视图周围添加 &lt;code&gt;NavigationView&lt;/code&gt;，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            ContentView()
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这使我们可以准确地查看视图的外观，而无需修改视图的实际布局。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>13.3_如何在不同设备中预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.3_%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%AD%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 08 Aug 2019 09:42:15 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.3_%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%AD%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;Xcode 的 SwiftUI 预览允许我们使用 &lt;code&gt;.previewDevice()&lt;/code&gt; 修改器同时以多种屏幕尺寸显示我们的设计。 这需要提供设备的确切名称，如 Xcode 的目的地菜单中所示，例如， &amp;ldquo;iPhone XS Max&amp;rdquo;。&lt;/p&gt;

&lt;h3 id=&#34;2-在-iphone-se-上预览&#34;&gt;2. 在 iPhone SE 上预览&lt;/h3&gt;

&lt;p&gt;例如，下面代码显示了 iPhone SE上的预览:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .background(Color.red)
    }
}

#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
           ContentView()
              .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone SE&amp;quot;))
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.3_preview_in_device_iphonese_without_devicename.png&#34; alt=&#34;13.3_preview_in_device_iphonese&#34; title=&#34;&amp;quot;Preview in iPhone SE without device name&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-显示设备名称&#34;&gt;3. 显示设备名称&lt;/h3&gt;

&lt;p&gt;使用特定设备进行预览时，我们可能会发现添加 &lt;code&gt;.previewDisplayName()&lt;/code&gt; 修改器非常有用，它允许我们在预览窗口中的设备下添加名称。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .background(Color.red)
    }
}

#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
           ContentView()
              .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone SE&amp;quot;))
              .previewDisplayName(&amp;quot;iPhone SE&amp;quot;)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.3_preview_in_device_iphonese_with_devicename.png&#34; alt=&#34;13.3_preview_in_device_iphonese_with_devicename&#34; title=&#34;Preview in iPhone SE with device name&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-创建多个设备的预览&#34;&gt;4. 创建多个设备的预览&lt;/h3&gt;

&lt;p&gt;例如，下面代码会为两个不同的设备创建两个预览，添加每个设备的名称以明确发生了什么:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello World&amp;quot;)
            .background(Color.red)
    }
}

#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone SE&amp;quot;))
                .previewDisplayName(&amp;quot;iPhone SE&amp;quot;)
            ContentView()
                .previewDevice(PreviewDevice(rawValue: &amp;quot;iPhone XS Max&amp;quot;))
                .previewDisplayName(&amp;quot;iPhone XS Max&amp;quot;)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>13.2_如何在light和dark模式下预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.2_%E5%A6%82%E4%BD%95%E5%9C%A8light%E5%92%8Cdark%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 07 Aug 2019 18:25:14 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.2_%E5%A6%82%E4%BD%95%E5%9C%A8light%E5%92%8Cdark%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;Apple的大多数操作系统都支持亮模式和暗模式用户界面，因此 SwiftUI 内置支持此功能也就不足为奇了。&lt;/p&gt;

&lt;p&gt;更好的是，一旦我们设计了界面，Xcode 允许我们通过在预览中设置 &lt;code&gt;\.colorScheme&lt;/code&gt; 环境值来以任一颜色方案预览布局。&lt;/p&gt;

&lt;p&gt;例如，下面显示使用暗模式的预览:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews : PreviewProvider {
   static var previews: some View {
      Group {
         ContentView()
            .environment(\.colorScheme, .dark)
      }
   }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们要并排查看明暗模式，请在组中放置多个预览，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .environment(\.colorScheme, .light)
            
            ContentView()
                .environment(\.colorScheme, .dark)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.2_preview_your_layout_in_light_and_dark_mode.gif&#34; alt=&#34;13.2_preview_your_layout_in_light_and_dark_mode&#34; title=&#34;Preview your layout in light and dark mode&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提示: 如果我们的预览已缩放，则应滚动或缩小到其他预览。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>13.1_如何以不同的动态类型大小预览布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/13-tooling/13.1_%E5%A6%82%E4%BD%95%E4%BB%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 07 Aug 2019 18:14:51 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/13-tooling/13.1_%E5%A6%82%E4%BD%95%E4%BB%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E5%A4%A7%E5%B0%8F%E9%A2%84%E8%A7%88%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;构建应用程序时，确保布局在所有动态类型范围内都能正常运行至关重要。 这部分是因为 SwiftUI 本身支持它，部分原因是许多人使用较小的字体大小，因为他们需要更高的信息密度，但主要是因为许多具有可访问性需求的人都依赖它。&lt;/p&gt;

&lt;p&gt;幸运的是，SwiftUI 的所有组件本身都适应动态类型大小，通过在预览中使用 &lt;code&gt;\.sizeCategory&lt;/code&gt; 环境值，可以轻松预览各种大小的设计。&lt;/p&gt;

&lt;p&gt;例如，如果我们想要查看视图如何使用额外的小文本，我们可以将 &lt;code&gt;.environment（\.size Category，.extra Small)&lt;/code&gt; 添加到内容视图预览中，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .environment(\.sizeCategory, .extraSmall)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们还可以发回一组预览，所有预览都使用不同的大小类别。 这使我们可以并排查看各种字体大小的相同设计。&lt;/p&gt;

&lt;p&gt;因此，此代码显示了超小尺寸，常规尺寸和最大尺寸的设计:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            ContentView()
                .environment(\.sizeCategory, .extraSmall)
            
            ContentView()
            
            ContentView()
            .environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
        }
    }
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/13.1_preview_your_layout_at_different_dynamic_type_sizes.gif&#34; alt=&#34;13.1_preview_your_layout_at_different_dynamic_type_sizes&#34; title=&#34;Preview in extraSmall, regular, accessibilityExtraExtraExtraLarge&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们的设计在所有这三个方面都很有效，那么我们很高兴。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提示: 如果我们的预览已缩放，则应滚动或缩小到其他预览。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
