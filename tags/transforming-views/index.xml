<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transforming views on M X</title>
    <link>https://coderxdlee.github.io/tags/transforming-views/</link>
    <description>Recent content in Transforming views on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Tue, 06 Aug 2019 15:49:19 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/transforming-views/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>10.16_如何将视图混合在一起</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.16_%E5%A6%82%E4%BD%95%E5%B0%86%E8%A7%86%E5%9B%BE%E6%B7%B7%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7/</link>
      <pubDate>Tue, 06 Aug 2019 15:49:19 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.16_%E5%A6%82%E4%BD%95%E5%B0%86%E8%A7%86%E5%9B%BE%E6%B7%B7%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;将一个视图放在另一个视图上时，可以使用 &lt;code&gt;blendMode()&lt;/code&gt; 修改器控制它们重叠的方式。 这包含多种可以将颜色混合在一起的方法，例如使用它们的差异或使用颜色刻录 - 如果您之前使用过 Core Graphics 或类似 Photoshop，这些方法会很熟悉。&lt;/p&gt;

&lt;p&gt;为了证明这一点，我们可以创建一个内部有两个图像的 &lt;code&gt;ZStack&lt;/code&gt; ，其中第二个具有 &lt;code&gt;.multiply&lt;/code&gt; 混合模式，以便使其后面的颜色变暗:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        ZStack {
            Image(&amp;quot;stripes&amp;quot;)
            Image(&amp;quot;example-image&amp;quot;)
                .blendMode(.multiply)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.16_blend.png&#34; alt=&#34;10.16_blend&#34; title=&#34;Blend two image view with multiply mode&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.15_如何模糊视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.15_%E5%A6%82%E4%BD%95%E6%A8%A1%E7%B3%8A%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Tue, 06 Aug 2019 15:37:49 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.15_%E5%A6%82%E4%BD%95%E6%A8%A1%E7%B3%8A%E8%A7%86%E5%9B%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-初识&#34;&gt;1. 初识&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;blur()&lt;/code&gt; 修改器允许我们根据自己的选择对视图应用实时高斯模糊。&lt;/p&gt;

&lt;h3 id=&#34;2-给图像设置模糊&#34;&gt;2. 给图像设置模糊&lt;/h3&gt;

&lt;p&gt;例如: 下面代码会创建一个 &lt;code&gt;300x300&lt;/code&gt; 的个人资料图片，然后添加一个20点的高斯模糊:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Image(&amp;quot;avatar&amp;quot;)
            .resizable()
            .frame(width: 300, height: 300)
            .blur(radius: 20)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.15_blur_20_radius.png&#34; alt=&#34;10.15_blur_20_radius&#34; title=&#34;Set a blur for a image view&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-给文本设置模糊&#34;&gt;3. 给文本设置模糊&lt;/h3&gt;

&lt;p&gt;我们可以模糊我们想要的任何内容，包括文本视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Welcome to my SwiftUI app&amp;quot;)
            .blur(radius: 2)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.15_set_blur_for_text.png&#34; alt=&#34;10.15_set_blur_for_text&#34; title=&#34;Set a blur for a text view&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.14_如何用另一个视图遮罩一个视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.14_%E5%A6%82%E4%BD%95%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE%E9%81%AE%E7%BD%A9%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Tue, 06 Aug 2019 15:16:56 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.14_%E5%A6%82%E4%BD%95%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE%E9%81%AE%E7%BD%A9%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 为我们提供了 &lt;code&gt;mask()&lt;/code&gt; 修改器，用于将一个图像作为另一个视图的蒙版，这意味着我们可以使用文本来作为图像的蒙版，或使用图像作为图像的蒙版，或更多。&lt;/p&gt;

&lt;p&gt;例如，下面代码会创建一个 &lt;code&gt;300x300&lt;/code&gt; 的条纹图像，然后使用文本 &amp;ldquo;SWIFT!&amp;rdquo; 对其进行遮罩，以便字母充当图像的剪切区域:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Image(&amp;quot;stripes&amp;quot;)
            .resizable()
            .frame(width: 300, height: 300)
            .mask(
                Text(&amp;quot;SWIFT!&amp;quot;)
                    .font(Font.system(size: 72, weight: .black, design: .serif))
            )
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.14_mask_image_with_text.png&#34; alt=&#34;10.14_mask_image_with_text&#34; title=&#34;Mask a image view with a text view&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.13_如何调整视图的强调色</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.13_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%B0%83%E8%89%B2/</link>
      <pubDate>Tue, 06 Aug 2019 14:35:43 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.13_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%B0%83%E8%89%B2/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;iOS 使用 &lt;code&gt;tints colors&lt;/code&gt; 为应用程序提供协调的主题，SwiftUI 中的 &lt;code&gt;accent colors&lt;/code&gt; 也提供了相同的功能。就像在 UIKit 中一样，当您设置一个视图的 &lt;code&gt;accent color&lt;/code&gt; 时，它会影响其中的所有内容，因此如果您设置顶级控件的 &lt;code&gt;accent color&lt;/code&gt;，那么一切都会变色。&lt;/p&gt;

&lt;p&gt;例如，下面代码会在 &lt;code&gt;VStack&lt;/code&gt; 中创建一个按钮，然后给它一个橙色的强调颜色:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Button(action: {}, label: {
                Text(&amp;quot;Tap here&amp;quot;)
            })
        }
        .accentColor(Color.orange)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.13_accent_color.png&#34; alt=&#34;10.13_accent_color&#34; title=&#34;Set accent color&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.12_如何调整视图的不透明度</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.12_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E4%B8%8D%E9%80%8F%E6%98%8E%E5%BA%A6/</link>
      <pubDate>Tue, 06 Aug 2019 14:19:22 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.12_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E4%B8%8D%E9%80%8F%E6%98%8E%E5%BA%A6/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;通过 &lt;code&gt;opacity()&lt;/code&gt; 修改器，我们可以将任何 SwiftUI 视图设置成部分或全部透明。它接收 &lt;em&gt;0(完全不可见)&lt;/em&gt; 到 &lt;em&gt;1(完全不透明)&lt;/em&gt; 之间的值。就像 UIKit 中 &lt;code&gt;UIView&lt;/code&gt; 的 &lt;code&gt;alpha&lt;/code&gt; 属性一样。&lt;/p&gt;

&lt;p&gt;例如: 下面代码创建一个带有红色背景的文本视图，然后给它30％的不透明度:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Now you see me&amp;quot;)
            .padding()
            .background(Color.red)
            .opacity(0.3)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.12_opacity.png&#34; alt=&#34;10.12_opacity&#34; title=&#34;Set opacity is 0.3&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.11_如何给视图设置圆角</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.11_%E5%A6%82%E4%BD%95%E7%BB%99%E8%A7%86%E5%9B%BE%E8%AE%BE%E7%BD%AE%E5%9C%86%E8%A7%92/</link>
      <pubDate>Tue, 06 Aug 2019 14:06:51 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.11_%E5%A6%82%E4%BD%95%E7%BB%99%E8%A7%86%E5%9B%BE%E8%AE%BE%E7%BD%AE%E5%9C%86%E8%A7%92/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;通过 &lt;code&gt;cornerRadius()&lt;/code&gt; 修改器，我们可以给任何 SwiftUI 视图设置圆角。这需要一个简单地值来限定如何明确地成圆。&lt;/p&gt;

&lt;p&gt;因此，我们可以创建一个25点圆角的文本视图，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Round me&amp;quot;)
            .padding()
            .background(Color.red)
            .cornerRadius(20)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.11_round_the_corner_25.png&#34; alt=&#34;10.11_round_the_corner_25&#34; title=&#34;Round the corner&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.10_如何向上或向下缩放视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.10_%E5%A6%82%E4%BD%95%E5%90%91%E4%B8%8A%E6%88%96%E5%90%91%E4%B8%8B%E7%BC%A9%E6%94%BE%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Tue, 06 Aug 2019 13:13:23 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.10_%E5%A6%82%E4%BD%95%E5%90%91%E4%B8%8A%E6%88%96%E5%90%91%E4%B8%8B%E7%BC%A9%E6%94%BE%E8%A7%86%E5%9B%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-初识&#34;&gt;1. 初识&lt;/h3&gt;

&lt;p&gt;SwiftUI的 &lt;code&gt;scaleEffect()&lt;/code&gt; 修改器允许我们自由地增大或减小视图的大小。&lt;/p&gt;

&lt;h3 id=&#34;2-放大视图&#34;&gt;2. 放大视图&lt;/h3&gt;

&lt;p&gt;例如，我们可以将文本视图设置为常规大小的五倍，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Up we go&amp;quot;)
            .scaleEffect(5)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;img/10.10_scale_up_5.png&#34; alt=&#34;10.10_scale_up_5&#34; title=&#34;Make a text view five times its regular size&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-独立缩放xy&#34;&gt;3. 独立缩放XY&lt;/h3&gt;

&lt;p&gt;如果需要，可以独立缩放X和Y尺寸，从而可以挤压以下视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Up we go&amp;quot;)
            .scaleEffect(x: 1, y: 5)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;img/10.10_scale_x_y.png&#34; alt=&#34;10.10_scale_x_y&#34; title=&#34;Scale the X and Y dimensions independently&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-设置锚点&#34;&gt;4. 设置锚点&lt;/h3&gt;

&lt;p&gt;如果您想要更多控制，可以为此缩放指定锚点，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Up we go&amp;quot;)
            .scaleEffect(2, anchor: UnitPoint(x: 1, y: 1))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;img/10.10_scale_with_anchor.png&#34; alt=&#34;10.10_scale_with_anchor&#34; title=&#34;Specify an anchor&#34; /&gt;
这使得文本视图两倍于常规大小，从右下角缩放。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.9_如何在3D中旋转视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.9_%E5%A6%82%E4%BD%95%E5%9C%A83d%E4%B8%AD%E6%97%8B%E8%BD%AC%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Tue, 06 Aug 2019 12:38:22 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.9_%E5%A6%82%E4%BD%95%E5%9C%A83d%E4%B8%AD%E6%97%8B%E8%BD%AC%E8%A7%86%E5%9B%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-初识&#34;&gt;1. 初识&lt;/h3&gt;

&lt;p&gt;SwiftUI 的 &lt;code&gt;rotation3DEffect()&lt;/code&gt; 修改器让我们可以在三维空间中旋转视图，几乎不需要任何代码就可以创建漂亮的效果。&lt;/p&gt;

&lt;p&gt;这个修改器接受两个参数:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;旋转的角度（以度或弧度为单位）。&lt;/li&gt;
&lt;li&gt;加上包含X，Y和Z轴的元组，围绕该轴执行旋转。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;: 如果你以前从未进行过三维旋转，那么你应该将X/Y/Z轴视为视图中的扦子。X轴是水平的，所以如果你在X轴上旋转，就像是在你的视图中放置一个水平的扦子 — 任何旋转都会使顶部或底部更近或更远，但不会调整前缘和后缘。&lt;/p&gt;

&lt;h3 id=&#34;2-围绕x轴旋转视图&#34;&gt;2. 围绕X轴旋转视图&lt;/h3&gt;

&lt;p&gt;因此，如果要围绕X轴将某些文本旋转45度（这将导致文本顶部比底部看得更远），可以编写以下命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .font(.largeTitle)
            .foregroundColor(.yellow)
            .rotation3DEffect(.degrees(-45), axis: (x: 1, y: 0, z: 0))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.9_rotate_in_3D_x_axis.png&#34; alt=&#34;10.9_rotate_in_3D_x_axis&#34; title=&#34;Rotate a text by x axis in 3D&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.8_如何旋转视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.8_%E5%A6%82%E4%BD%95%E6%97%8B%E8%BD%AC%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Tue, 06 Aug 2019 11:16:22 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.8_%E5%A6%82%E4%BD%95%E6%97%8B%E8%BD%AC%E8%A7%86%E5%9B%BE/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-初识&#34;&gt;1. 初识&lt;/h3&gt;

&lt;p&gt;SwiftUI的 &lt;code&gt;rotationEffect()&lt;/code&gt; 修改器让我们可以使用度数或弧度自由旋转视图。&lt;/p&gt;

&lt;h3 id=&#34;2-使用角度旋转视图&#34;&gt;2. 使用角度旋转视图&lt;/h3&gt;

&lt;p&gt;例如，如果我们想将某些文本旋转-90度以使其向上读取，我们可以使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Up we go&amp;quot;)
            .rotationEffect(.degrees(-90))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.8_rotate_90_degree.png&#34; alt=&#34;10.8_rotate_90_degree&#34; title=&#34;Rotate a text by -90 degrees so that it reads upwards&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-使用弧度旋转视图&#34;&gt;3. 使用弧度旋转视图&lt;/h3&gt;

&lt;p&gt;如果我们更喜欢使用弧度，只需传入 &lt;code&gt;.radians()&lt;/code&gt; 作为参数，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Up we go&amp;quot;)
            .rotationEffect(.radians(.pi))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.8_rotate_pi.png&#34; alt=&#34;10.8_rotate_pi&#34; title=&#34;Using radians&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-使用滑块交互&#34;&gt;4. 使用滑块交互&lt;/h3&gt;

&lt;p&gt;视图旋转速度如此之快，以至于实际上是自由的，所以如果需要，甚至可以使用滑块进行交互:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var rotation: Double = 0
    
    var body: some View {
        VStack {
            Slider(value: $rotation, in: 0...360, step: 1) { _ in
                print(self.rotation)
            }
            Text(&amp;quot;Up we go&amp;quot;)
                .rotationEffect(.degrees(rotation))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.8_rotate_by_slider.gif&#34; alt=&#34;10.8_rotate_by_slider&#34; title=&#34;Rotate a view by a slider&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-设置旋转锚点&#34;&gt;5. 设置旋转锚点&lt;/h3&gt;

&lt;p&gt;默认情况下，视图围绕其中心旋转，但如果要从特定点固定旋转，则可以为其添加额外参数。 例如，如果你想让旋转器围绕视图的左上角旋转旋转，你可以这样写：&lt;/p&gt;

&lt;p&gt;默认情况下，视图围绕其中心旋转，但如果要从特定点固定旋转，可以为此添加一个额外参数。例如，如果要使上方的滑块围绕视图左上角旋转，可以编写以下命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @State private var rotation: Double = 0
    
    var body: some View {
        VStack {
            Slider(value: $rotation, in: 0...360, step: 1) { _ in
                print(self.rotation)
            }
            Text(&amp;quot;Up we go&amp;quot;)
                .rotationEffect(.degrees(rotation), anchor: UnitPoint(x: 0, y: 0))
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.8_rotate_by_slider_with_anchor.gif&#34; alt=&#34;10.8_rotate_by_slider_with_anchor&#34; title=&#34;Rotate a text by slider with an anchor&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.7_如何剪裁视图使其只有部分可见</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.7_%E5%A6%82%E4%BD%95%E5%89%AA%E8%A3%81%E8%A7%86%E5%9B%BE%E4%BD%BF%E5%85%B6%E5%8F%AA%E6%9C%89%E9%83%A8%E5%88%86%E5%8F%AF%E8%A7%81/</link>
      <pubDate>Tue, 06 Aug 2019 11:01:10 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.7_%E5%A6%82%E4%BD%95%E5%89%AA%E8%A3%81%E8%A7%86%E5%9B%BE%E4%BD%BF%E5%85%B6%E5%8F%AA%E6%9C%89%E9%83%A8%E5%88%86%E5%8F%AF%E8%A7%81/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-初识&#34;&gt;1. 初识&lt;/h3&gt;

&lt;p&gt;通过使用 &lt;code&gt;clipShape()&lt;/code&gt; 修改器，SwiftUI允许我们剪切任何视图以控制其形状。&lt;/p&gt;

&lt;h3 id=&#34;2-创建圆形按钮&#34;&gt;2. 创建圆形按钮&lt;/h3&gt;

&lt;p&gt;例如: 下面的代码使用系统图像 &lt;code&gt;bolt.fill&lt;/code&gt; 创建一个按钮，给它一些填充和背景颜色，然后使用圆形剪裁它，以便我们得到一个圆形按钮:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Button(action: {
            print(&amp;quot;Button tapped!&amp;quot;)
        }, label: {
            Image(systemName: &amp;quot;bolt.fill&amp;quot;)
                .foregroundColor(.white)
                .padding()
                .background(Color.green)
                .clipShape(Circle())
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.7_create_circle_button.png&#34; alt=&#34;10.7_create_circle_button&#34; title=&#34;Create a circle button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Circle&lt;/code&gt; 剪辑形状将始终从视图中创建圆圈，即使它们的宽度和高度不相等 - 它只会裁剪较大的值以匹配较小的值。&lt;/p&gt;

&lt;h3 id=&#34;3&#34;&gt;3.&lt;/h3&gt;

&lt;p&gt;除了 &lt;code&gt;Circle&lt;/code&gt; 之外，还有 &lt;code&gt;Capsule&lt;/code&gt;，它可以看到圆形的菱形形状。 例如，下面的代码使用 &lt;code&gt;Capsule&lt;/code&gt; 形状创建相同的按钮:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Button(action: {
            print(&amp;quot;Button tapped!&amp;quot;)
        }, label: {
            Image(systemName: &amp;quot;bolt.fill&amp;quot;)
                .foregroundColor(.white)
                .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))
                .background(Color.green)
                .clipShape(Capsule())
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.7_create_capsule_button.png&#34; alt=&#34;10.7_create_capsule_button&#34; title=&#34;Create a capsule button&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.6_如何在视图周围绘制阴影</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.6_%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%BB%98%E5%88%B6%E9%98%B4%E5%BD%B1/</link>
      <pubDate>Tue, 06 Aug 2019 10:37:26 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.6_%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%BB%98%E5%88%B6%E9%98%B4%E5%BD%B1/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;SwiftUI 为我们提供了一个专用的 &lt;code&gt;shadow()&lt;/code&gt; 修改器，用于在视图周围绘制阴影。 我们可以控制阴影的颜色、半径和位置，还可以通过调整修改器顺序来控制视图的哪些部分被阴影遮盖。&lt;/p&gt;

&lt;h3 id=&#34;2-通过模糊半径绘制阴影&#34;&gt;2. 通过模糊半径绘制阴影&lt;/h3&gt;

&lt;p&gt;在其基本形式中，我们只需指定模糊的半径即可添加阴影，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .shadow(radius: 5)
            .border(Color.red, width: 4)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.6_shadow_through_radius.png&#34; alt=&#34;10.6_shadow_through_radius&#34; title=&#34;Add a shadow just by specifying the radius of the blur&#34; /&gt;
这段代码添加了一个非常轻微的阴影，以文本为中心的5点模糊。&lt;/p&gt;

&lt;h3 id=&#34;3-绘制红色阴影&#34;&gt;3. 绘制红色阴影&lt;/h3&gt;

&lt;p&gt;我们还可以指定所需的颜色以及原始视图的X和Y偏移。 例如，下面的代码会创建一个强烈的红色阴影，其中包含5点模糊，以文本为中心：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .shadow(color: Color.red, radius: 5)
            .border(Color.red, width: 4)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.6_shadow_red.png&#34; alt=&#34;10.6_shadow_red&#34; title=&#34;This creates a strong red shadow with a 5 point blur&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-为阴影设置偏移量&#34;&gt;4. 为阴影设置偏移量&lt;/h3&gt;

&lt;p&gt;如果要为阴影指定偏移，请将 &lt;code&gt;x&lt;/code&gt; 和/或 &lt;code&gt;y&lt;/code&gt; 参数添加到修改器，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .shadow(color: Color.red, radius: 5, x: 20, y: 20)
            .border(Color.red, width: 4)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.6_shadow_red_x20_y20.png&#34; alt=&#34;10.6_shadow_red_x20_y20&#34; title=&#34;Add x and/or y parameters to the modifier&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-为边框绘制阴影&#34;&gt;5. 为边框绘制阴影&lt;/h3&gt;

&lt;p&gt;请记住，SwiftUI 按照列出修改器的顺序来应用它们，因此如果我们希望可以将阴影应用于边框，只需将边框修改器放在阴影修改器之前:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .border(Color.red, width: 4)
            .shadow(color: Color.red, radius: 5, x: 20, y: 20)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;img/10.6_shadow_set_shadow_for_border.png&#34; alt=&#34;10.6_shadow_set_shadow_for_border&#34; title=&#34;Apply a shadow for the border&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.5_如何在视图周围绘制边框</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.5_%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%BB%98%E5%88%B6%E8%BE%B9%E6%A1%86/</link>
      <pubDate>Tue, 06 Aug 2019 10:17:54 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.5_%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%BB%98%E5%88%B6%E8%BE%B9%E6%A1%86/</guid>
      <description>

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;SwiftUI 为我们提供了一个专用的 &lt;code&gt;border&lt;/code&gt; 修改器，用于在视图周围绘制边框。根据我们是要指定笔划宽度(a stroke width)还是圆角半径(a corner radius)，它有一些变化，因此下面是几个示例:&lt;/p&gt;

&lt;h3 id=&#34;2-绘制1个点的边框&#34;&gt;2. 绘制1个点的边框&lt;/h3&gt;

&lt;p&gt;下面的代码在文本视图周围绘制1个点的黑色边框:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .border(Color.black)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.5_border_1_point.png&#34; alt=&#34;10.5_border_1_point&#34; title=&#34;This adds a simple 1-point black border around a text view&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-先添加填充再绘制边框&#34;&gt;3. 先添加填充再绘制边框&lt;/h3&gt;

&lt;p&gt;如果要使边框不位于视图边缘，请先添加一些填充：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .border(Color.black)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.5_border_with_padding.png&#34; alt=&#34;10.5_border_with_padding&#34; title=&#34;Add some padding first, then add border&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-添加4个点的红色边框&#34;&gt;4. 添加4个点的红色边框&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .border(Color.red, width: 4)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.5_border_4_point_red.png&#34; alt=&#34;10.5_border_4_point_red&#34; title=&#34;This adds a 4 point red border&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.4_如何堆叠修改器以创建更高级的效果</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.4_%E5%A6%82%E4%BD%95%E5%A0%86%E5%8F%A0%E4%BF%AE%E6%94%B9%E5%99%A8%E4%BB%A5%E5%88%9B%E5%BB%BA%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84%E6%95%88%E6%9E%9C/</link>
      <pubDate>Tue, 06 Aug 2019 10:07:51 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.4_%E5%A6%82%E4%BD%95%E5%A0%86%E5%8F%A0%E4%BF%AE%E6%94%B9%E5%99%A8%E4%BB%A5%E5%88%9B%E5%BB%BA%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;我们添加到视图中的每个修改器都会调整其前面的内容，并且可以多次重复使用修改器。&lt;/p&gt;

&lt;p&gt;例如，我们可以在文本视图周围添加填充和背景色，然后添加更多的填充和不同的背景色，然后添加更多的填充和第三种背景色，所有这些都可以产生特定的效果:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Forecast: Sun&amp;quot;)
            .font(.largeTitle)
            .foregroundColor(Color.white)
            .padding()
            .background(Color.red)
            .padding()
            .background(Color.orange)
            .padding()
            .background(Color.yellow)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.4_stack_modifiers.png&#34; alt=&#34;10.4_stack_modifiers&#34; title=&#34;Stack modifiers&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.3_如何为视图周围的填充设置颜色</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.3_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%9A%84%E5%A1%AB%E5%85%85%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Tue, 06 Aug 2019 09:46:19 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.3_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%9A%84%E5%A1%AB%E5%85%85%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;padding()&lt;/code&gt; 修饰符允许我们在视图周围添加一些空间，&lt;code&gt;background()&lt;/code&gt; 修饰符允许我们设置背景颜色。 但是，我们使用它们的方式很重要，因此明确我们的目标以获得最佳结果非常重要。&lt;/p&gt;

&lt;h3 id=&#34;2-先着色后填充&#34;&gt;2. 先着色后填充&lt;/h3&gt;

&lt;p&gt;例如，下面的代码将创建一个具有黑色背景和白色前景的文本视图，然后向其添加系统默认填充:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .background(Color.black)
            .foregroundColor(Color.white)
            .padding()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.3_backgroudcolor_foregroundcolor_padding.png&#34; alt=&#34;10.3_backgroudcolor_foregroundcolor_padding&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-先填充后着色&#34;&gt;3. 先填充后着色&lt;/h3&gt;

&lt;p&gt;例如，下面的代码将为文本视图添加系统默认填充，然后再为其设置红色背景和白色前景:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .background(Color.red)
            .foregroundColor(Color.white)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.3_padding_backgroudcolor_foregroundcolor.png&#34; alt=&#34;10.3_padding_backgroudcolor_foregroundcolor&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h3&gt;

&lt;p&gt;这两段代码可能看起来很相似，但是它们会产生不同的结果，因为应用修饰符的顺序很重要。在第二个示例中，视图先被填充，然后被着色，这意味着填充也被着色为红色。与此相反，第一个示例是先着色，然后填充，因此填充保持未着色。&lt;/p&gt;

&lt;p&gt;因此，如果我们希望某些文本的背景色比文本本身更宽，请确保使用第二个代码示例 – 先填充后着色。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.2_如何调整视图的位置</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.2_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Tue, 06 Aug 2019 09:17:27 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.2_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;所有视图在层次结构中都有一个自然位置，但是我们可以通过 &lt;code&gt;offset()&lt;/code&gt; 修改器相对于其自然位置来移动它们。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重要说明:&lt;/strong&gt; 使用 &lt;code&gt;offset()&lt;/code&gt; 将导致视图相对于其自然位置进行移动，但是不会影响其它视图的位置。这意味着我们可以使一个视图与另一个视图重叠，因为通常情况下它们可能彼此相邻，而这可能不是我们想要的。&lt;/p&gt;

&lt;p&gt;例如，在这个 &lt;code&gt;VStack&lt;/code&gt; 中，我们可以使用 &lt;code&gt;offset()&lt;/code&gt; 将第二个项目向下移动15个点，以便它开始与第三个项目重叠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Text(&amp;quot;Home&amp;quot;)
            Text(&amp;quot;Options&amp;quot;)
                .offset(y: 15)
            Text(&amp;quot;Help&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.2_adjust_position_2nd_item_in_vstack.png&#34; alt=&#34;10.2_adjust_position_2nd_item_in_vstack&#34; title=&#34;Set offset.y = 15 for the 2nd item&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通常，我们可以使用 &lt;code&gt;padding()&lt;/code&gt; 和 &lt;code&gt;offset()&lt;/code&gt; 来得到我们期望的结果，因为这样可以移动一个视图，同时挑着做那个它旁边的视图以使其匹配。&lt;/p&gt;

&lt;p&gt;例如: 我们将第二个项目向下移动15个点，但在其底边添加15个填充点，使其不会与下面的文本视图重叠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Text(&amp;quot;Home&amp;quot;)
            Text(&amp;quot;Options&amp;quot;)
                .offset(y: 15)
                .padding(.bottom, 15)
            Text(&amp;quot;Help&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.2_adjust_position_using_padding.png&#34; alt=&#34;10.2_adjust_position_using_padding&#34; title=&#34;Set padding.bottom = 15&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.1_如何为视图提供自定义frame</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.1_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E6%8F%90%E4%BE%9B%E8%87%AA%E5%AE%9A%E4%B9%89frame/</link>
      <pubDate>Tue, 06 Aug 2019 00:19:31 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.1_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E6%8F%90%E4%BE%9B%E8%87%AA%E5%AE%9A%E4%B9%89frame/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;默认情况下，视图只占用自己所需的空间，但是如果我们想要更改它，可以使用 &lt;code&gt;frame()&lt;/code&gt; 修饰符告诉 SwiftUI 我们想要的尺寸范围(size range)。&lt;/p&gt;

&lt;p&gt;例如，可以创建一个具有 &lt;code&gt;200x200&lt;/code&gt; 可点击区域的按钮，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Button(action: {
            print(&amp;quot;Button tapped&amp;quot;)
        }, label: {
            Text(&amp;quot;Welcome&amp;quot;)
                .frame(minWidth: 0, maxWidth: 200, minHeight: 0, maxHeight: 200, alignment: .center)
                .font(.largeTitle)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.1_frame_200wh_button.png&#34; alt=&#34;10.1_frame_200wh_button&#34; title=&#34;Create a 200 * 200 button&#34; /&gt;
或者，我们可以通过指定一个 frame 来使文本视图填充整个屏幕，这个 frame 的最小宽度和最小高度为0，最大宽度和最大高度是无穷大。如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Please login&amp;quot;)
            .frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity, alignment: .center)
                .font(.largeTitle)
                .foregroundColor(Color.white)
                .background(Color.red)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.1_frame_fill_screen_text.png&#34; alt=&#34;10.1_frame_fill_screen_text&#34; title=&#34;Create a text which fills the screen&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
