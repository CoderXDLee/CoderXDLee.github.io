<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transforming views on M X</title>
    <link>https://coderxdlee.github.io/tags/transforming-views/</link>
    <description>Recent content in Transforming views on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Tue, 06 Aug 2019 10:17:54 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/transforming-views/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>10.5_如何在视图周围绘制边框</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.5_%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%BB%98%E5%88%B6%E8%BE%B9%E6%A1%86/</link>
      <pubDate>Tue, 06 Aug 2019 10:17:54 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.5_%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%BB%98%E5%88%B6%E8%BE%B9%E6%A1%86/</guid>
      <description>

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;SwiftUI 为我们提供了一个专用的 &lt;code&gt;border&lt;/code&gt; 修改器，用于在视图周围绘制边框。根据我们是要指定笔划宽度(a stroke width)还是圆角半径(a corner radius)，它有一些变化，因此下面是几个示例:&lt;/p&gt;

&lt;h3 id=&#34;2-绘制1个点的边框&#34;&gt;2. 绘制1个点的边框&lt;/h3&gt;

&lt;p&gt;下面的代码在文本视图周围绘制1个点的黑色边框:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .border(Color.black)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.5_border_1_point.png&#34; alt=&#34;10.5_border_1_point&#34; title=&#34;This adds a simple 1-point black border around a text view&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-先添加填充再绘制边框&#34;&gt;3. 先添加填充再绘制边框&lt;/h3&gt;

&lt;p&gt;如果要使边框不位于视图边缘，请先添加一些填充：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .border(Color.black)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.5_border_with_padding.png&#34; alt=&#34;10.5_border_with_padding&#34; title=&#34;Add some padding first, then add border&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-添加4个点的红色边框&#34;&gt;4. 添加4个点的红色边框&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .border(Color.red, width: 4)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.5_border_4_point_red.png&#34; alt=&#34;10.5_border_4_point_red&#34; title=&#34;This adds a 4 point red border&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.4_如何堆叠修改器以创建更高级的效果</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.4_%E5%A6%82%E4%BD%95%E5%A0%86%E5%8F%A0%E4%BF%AE%E6%94%B9%E5%99%A8%E4%BB%A5%E5%88%9B%E5%BB%BA%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84%E6%95%88%E6%9E%9C/</link>
      <pubDate>Tue, 06 Aug 2019 10:07:51 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.4_%E5%A6%82%E4%BD%95%E5%A0%86%E5%8F%A0%E4%BF%AE%E6%94%B9%E5%99%A8%E4%BB%A5%E5%88%9B%E5%BB%BA%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;我们添加到视图中的每个修改器都会调整其前面的内容，并且可以多次重复使用修改器。&lt;/p&gt;

&lt;p&gt;例如，我们可以在文本视图周围添加填充和背景色，然后添加更多的填充和不同的背景色，然后添加更多的填充和第三种背景色，所有这些都可以产生特定的效果:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Forecast: Sun&amp;quot;)
            .font(.largeTitle)
            .foregroundColor(Color.white)
            .padding()
            .background(Color.red)
            .padding()
            .background(Color.orange)
            .padding()
            .background(Color.yellow)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.4_stack_modifiers.png&#34; alt=&#34;10.4_stack_modifiers&#34; title=&#34;Stack modifiers&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.3_如何为视图周围的填充设置颜色</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.3_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%9A%84%E5%A1%AB%E5%85%85%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Tue, 06 Aug 2019 09:46:19 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.3_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%9A%84%E5%A1%AB%E5%85%85%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2/</guid>
      <description>

&lt;!-- more --&gt;

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;padding()&lt;/code&gt; 修饰符允许我们在视图周围添加一些空间，&lt;code&gt;background()&lt;/code&gt; 修饰符允许我们设置背景颜色。 但是，我们使用它们的方式很重要，因此明确我们的目标以获得最佳结果非常重要。&lt;/p&gt;

&lt;h3 id=&#34;2-先着色后填充&#34;&gt;2. 先着色后填充&lt;/h3&gt;

&lt;p&gt;例如，下面的代码将创建一个具有黑色背景和白色前景的文本视图，然后向其添加系统默认填充:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .background(Color.black)
            .foregroundColor(Color.white)
            .padding()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.3_backgroudcolor_foregroundcolor_padding.png&#34; alt=&#34;10.3_backgroudcolor_foregroundcolor_padding&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-先填充后着色&#34;&gt;3. 先填充后着色&lt;/h3&gt;

&lt;p&gt;例如，下面的代码将为文本视图添加系统默认填充，然后再为其设置红色背景和白色前景:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .padding()
            .background(Color.red)
            .foregroundColor(Color.white)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.3_padding_backgroudcolor_foregroundcolor.png&#34; alt=&#34;10.3_padding_backgroudcolor_foregroundcolor&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h3&gt;

&lt;p&gt;这两段代码可能看起来很相似，但是它们会产生不同的结果，因为应用修饰符的顺序很重要。在第二个示例中，视图先被填充，然后被着色，这意味着填充也被着色为红色。与此相反，第一个示例是先着色，然后填充，因此填充保持未着色。&lt;/p&gt;

&lt;p&gt;因此，如果我们希望某些文本的背景色比文本本身更宽，请确保使用第二个代码示例 – 先填充后着色。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.2_如何调整视图的位置</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.2_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Tue, 06 Aug 2019 09:17:27 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.2_%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;所有视图在层次结构中都有一个自然位置，但是我们可以通过 &lt;code&gt;offset()&lt;/code&gt; 修改器相对于其自然位置来移动它们。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重要说明:&lt;/strong&gt; 使用 &lt;code&gt;offset()&lt;/code&gt; 将导致视图相对于其自然位置进行移动，但是不会影响其它视图的位置。这意味着我们可以使一个视图与另一个视图重叠，因为通常情况下它们可能彼此相邻，而这可能不是我们想要的。&lt;/p&gt;

&lt;p&gt;例如，在这个 &lt;code&gt;VStack&lt;/code&gt; 中，我们可以使用 &lt;code&gt;offset()&lt;/code&gt; 将第二个项目向下移动15个点，以便它开始与第三个项目重叠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Text(&amp;quot;Home&amp;quot;)
            Text(&amp;quot;Options&amp;quot;)
                .offset(y: 15)
            Text(&amp;quot;Help&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.2_adjust_position_2nd_item_in_vstack.png&#34; alt=&#34;10.2_adjust_position_2nd_item_in_vstack&#34; title=&#34;Set offset.y = 15 for the 2nd item&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通常，我们可以使用 &lt;code&gt;padding()&lt;/code&gt; 和 &lt;code&gt;offset()&lt;/code&gt; 来得到我们期望的结果，因为这样可以移动一个视图，同时挑着做那个它旁边的视图以使其匹配。&lt;/p&gt;

&lt;p&gt;例如: 我们将第二个项目向下移动15个点，但在其底边添加15个填充点，使其不会与下面的文本视图重叠:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Text(&amp;quot;Home&amp;quot;)
            Text(&amp;quot;Options&amp;quot;)
                .offset(y: 15)
                .padding(.bottom, 15)
            Text(&amp;quot;Help&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.2_adjust_position_using_padding.png&#34; alt=&#34;10.2_adjust_position_using_padding&#34; title=&#34;Set padding.bottom = 15&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.1_如何为视图提供自定义frame</title>
      <link>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.1_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E6%8F%90%E4%BE%9B%E8%87%AA%E5%AE%9A%E4%B9%89frame/</link>
      <pubDate>Tue, 06 Aug 2019 00:19:31 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/10-transforming_views/10.1_%E5%A6%82%E4%BD%95%E4%B8%BA%E8%A7%86%E5%9B%BE%E6%8F%90%E4%BE%9B%E8%87%AA%E5%AE%9A%E4%B9%89frame/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;默认情况下，视图只占用自己所需的空间，但是如果我们想要更改它，可以使用 &lt;code&gt;frame()&lt;/code&gt; 修饰符告诉 SwiftUI 我们想要的尺寸范围(size range)。&lt;/p&gt;

&lt;p&gt;例如，可以创建一个具有 &lt;code&gt;200x200&lt;/code&gt; 可点击区域的按钮，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Button(action: {
            print(&amp;quot;Button tapped&amp;quot;)
        }, label: {
            Text(&amp;quot;Welcome&amp;quot;)
                .frame(minWidth: 0, maxWidth: 200, minHeight: 0, maxHeight: 200, alignment: .center)
                .font(.largeTitle)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.1_frame_200wh_button.png&#34; alt=&#34;10.1_frame_200wh_button&#34; title=&#34;Create a 200 * 200 button&#34; /&gt;
或者，我们可以通过指定一个 frame 来使文本视图填充整个屏幕，这个 frame 的最小宽度和最小高度为0，最大宽度和最大高度是无穷大。如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        Text(&amp;quot;Please login&amp;quot;)
            .frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity, alignment: .center)
                .font(.largeTitle)
                .foregroundColor(Color.white)
                .background(Color.red)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/10.1_frame_fill_screen_text.png&#34; alt=&#34;10.1_frame_fill_screen_text&#34; title=&#34;Create a text which fills the screen&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
