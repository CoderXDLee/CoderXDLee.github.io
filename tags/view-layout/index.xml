<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>View layout on M X</title>
    <link>https://coderxdlee.github.io/tags/view-layout/</link>
    <description>Recent content in View layout on M X</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>M X ©{year}</copyright>
    <lastBuildDate>Mon, 14 Oct 2019 23:51:29 +0800</lastBuildDate>
    
	    <atom:link href="https://coderxdlee.github.io/tags/view-layout/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.12_如何使用GeometryReader提供相对大小</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.12_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8geometryreader%E6%8F%90%E4%BE%9B%E7%9B%B8%E5%AF%B9%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Mon, 14 Oct 2019 23:51:29 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.12_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8geometryreader%E6%8F%90%E4%BE%9B%E7%9B%B8%E5%AF%B9%E5%A4%A7%E5%B0%8F/</guid>
      <description>

&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;

&lt;p&gt;尽管通常最好让 SwiftUI 使用堆栈执行自动布局，但也可以使用 &lt;code&gt;GeometryReader&lt;/code&gt; 给出视图相对于其容器的尺寸。 例如，如果我们希望两个视图占用屏幕上可用宽度的一半，则无法使用硬编码值，因为我们无法提前知道屏幕的宽度是多少。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，&lt;code&gt;GeometryReader&lt;/code&gt; 为我们提供了一个输入值，告诉我们可用的宽度和高度，然后我们可以在需要的任何计算中使用它。 因此，要使两个视图占据相等的宽度，我们可以将可用空间分成两半，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        GeometryReader { geometry in
            HStack(spacing: 0) {
                Text(&amp;quot;Left&amp;quot;)
                    .frame(width: geometry.size.width / 2, height: 50)
                    .background(Color.orange)
                Text(&amp;quot;Right&amp;quot;)
                    .frame(width: geometry.size.width / 2, height: 50)
                    .background(Color.yellow)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.12_geometry_reader.png&#34; alt=&#34;2.12_geometry_reader&#34; title=&#34;Use GeometryReader&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: GeometryReader 并未考虑视图层次结构中更下方的任何偏移量或间距，这就是为什么 HStack 上没有间距的原因–如果我们在其中允许间距，则视图对于可用空间会有点太大 。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>2.11_如何给视图自定义Frame</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.11_%E5%A6%82%E4%BD%95%E7%BB%99%E8%A7%86%E5%9B%BE%E8%87%AA%E5%AE%9A%E4%B9%89frame/</link>
      <pubDate>Mon, 14 Oct 2019 23:30:07 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.11_%E5%A6%82%E4%BD%95%E7%BB%99%E8%A7%86%E5%9B%BE%E8%87%AA%E5%AE%9A%E4%B9%89frame/</guid>
      <description>

&lt;p&gt;默认情况下，视图仅占用所需的空间，但是如果要更改视图，可以使用 &lt;code&gt;frame()&lt;/code&gt; 修饰符告诉 SwiftUI 我们想要的大小范围。&lt;/p&gt;

&lt;h3 id=&#34;1-创建-200x200-可点击区域的按钮&#34;&gt;1. 创建 200x200 可点击区域的按钮&lt;/h3&gt;

&lt;p&gt;例如，我们可以创建一个具有 200x200 可点击区域的按钮，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 1. 创建 200x200 可点击区域的按钮
        Button(action: {
            print(&amp;quot;Button tapped!&amp;quot;)
        }, label: {
            Text(&amp;quot;Welcome&amp;quot;)
            .frame(minWidth: 0, maxWidth: 200, minHeight: 0, maxHeight: 200)
                .font(.largeTitle)
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.11_custom_frame_200_200_rectangle.png&#34; alt=&#34;2.11_custom_frame_200_200_rectangle&#34; title=&#34;Create a 200 * 200 rectangle.&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-指定-frame-使文本视图填充整个屏幕&#34;&gt;2. 指定 frame 使文本视图填充整个屏幕&lt;/h3&gt;

&lt;p&gt;我们可以通过指定一个框架来使文本视图填充整个屏幕（减去安全区域），该框架的最小宽度和高度为零，最大宽度和高度为无穷大，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 2. 指定 frame 使文本视图填充整个屏幕
        Text(&amp;quot;Please log in&amp;quot;)
            .frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity)
            .foregroundColor(.white)
            .background(Color.red)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.11_custom_frame_text_fill_fullscreen.png&#34; alt=&#34;2.11_custom_frame_text_fill_fullscreen&#34; title=&#34;Set a frame to make text view fill the full screen.&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 如果要使视图进入安全区域，请确保添加 &lt;code&gt;.edgesIgnoringSafeArea(.all)&lt;/code&gt;修饰符。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.11_custom_frame_edge_ignore_safe_area.png&#34; alt=&#34;2.11_custom_frame_edge_ignore_safe_area&#34; title=&#34;Add .edgesIgnoringSafeArea all&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.7_如何使用Z索引更改视图分层的顺序</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.7_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8z%E7%B4%A2%E5%BC%95%E6%9B%B4%E6%94%B9%E8%A7%86%E5%9B%BE%E5%88%86%E5%B1%82%E7%9A%84%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Sat, 12 Oct 2019 23:42:35 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.7_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8z%E7%B4%A2%E5%BC%95%E6%9B%B4%E6%94%B9%E8%A7%86%E5%9B%BE%E5%88%86%E5%B1%82%E7%9A%84%E9%A1%BA%E5%BA%8F/</guid>
      <description>

&lt;h3 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h3&gt;

&lt;p&gt;默认情况下，ZStack 使用 painter 的算法对其视图进行分层，以确定视图的深度: 首先放入 ZStack 中的内容会被首先绘制，然后在其上分层后续视图。&lt;/p&gt;

&lt;p&gt;尽管这通常是我们想要的，但有时我们需要更多的控制权 - 例如，我们可能希望在应用运行时将一个视图推到另一个视图的后面，或者在点击某个视图时将其移到最前面。&lt;/p&gt;

&lt;p&gt;要做到这一点，我们需要使用 &lt;code&gt;zIndex()&lt;/code&gt; 修饰符，该修饰符允许我们精确地指定视图在单个 ZStack 中的分层方式。视图的默认z索引为0，但可以提供正值或负值，分别将它们放置在其他视图的上方或下方。&lt;/p&gt;

&lt;h3 id=&#34;2-示例-绿色矩形放置在红色矩形之上&#34;&gt;2. 示例: 绿色矩形放置在红色矩形之上&lt;/h3&gt;

&lt;p&gt;例如，此 ZStack 包含两个重叠的矩形，但是绿色矩形仍然可见，因为它使用的Z索引值为1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 绿色矩形放置在红色矩形之上
        ZStack {
            Rectangle()
                .fill(Color.green)
                .frame(width: 50, height: 50)
                .zIndex(1)
            Rectangle()
                .fill(Color.red)
                .frame(width: 100, height: 100) 
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.7_zIndex_green_red_rectangle.png&#34; alt=&#34;2.7_zIndex_green_red_rectangle&#34; title=&#34;Green rectangle is above on the red rectangle&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: &lt;code&gt;zIndex()&lt;/code&gt; 修饰符仅影响当前 ZStack 内的绘制顺序。 这意味着，如果我们有两个重叠的堆栈，则需要考虑堆栈的Z索引以及堆栈内部的视图。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>2.5_如何创建固定尺寸的Spacer</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.5_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%9B%BA%E5%AE%9A%E5%B0%BA%E5%AF%B8%E7%9A%84spacer/</link>
      <pubDate>Sat, 12 Oct 2019 23:25:11 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.5_%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%9B%BA%E5%AE%9A%E5%B0%BA%E5%AF%B8%E7%9A%84spacer/</guid>
      <description>&lt;p&gt;SwiftUI 的 &lt;code&gt;Spacer&lt;/code&gt; 视图会自动填充其扩展轴上的所有可用空间，这是一种奇特的说法: 即根据我们所放置的内容，它们在水平或垂直方向上会占用尽可能多的空间。&lt;/p&gt;

&lt;p&gt;如果要制作一个精确大小的 &lt;code&gt;Spacer&lt;/code&gt;，则可以执行与其他视图相同的操作: 使用具有所需大小的 &lt;code&gt;frame()&lt;/code&gt; 修饰符。&lt;/p&gt;

&lt;p&gt;例如，这显示了两个文本视图，它们之间有一个50点的空格：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Text(&amp;quot;First Label&amp;quot;)
                .background(Color.red)
            Spacer()
                .frame(height: 50)
            Text(&amp;quot;Second Label&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.5_make_a_fix_spacer.png&#34; alt=&#34;2.5_make_a_fix_spacer.png&#34; title=&#34;Make a fix size spacer view&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.4_如何使用Spacer将视图强制移到堆栈中的一侧</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.4_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8spacer%E5%B0%86%E8%A7%86%E5%9B%BE%E5%BC%BA%E5%88%B6%E7%A7%BB%E5%88%B0%E5%A0%86%E6%A0%88%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BE%A7/</link>
      <pubDate>Sat, 12 Oct 2019 21:27:39 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.4_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8spacer%E5%B0%86%E8%A7%86%E5%9B%BE%E5%BC%BA%E5%88%B6%E7%A7%BB%E5%88%B0%E5%A0%86%E6%A0%88%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BE%A7/</guid>
      <description>

&lt;p&gt;默认情况下，SwiftUI 会将其视图居中，这意味着: 如果将三个文本视图放在 VStack 中，则这三个文本视图将垂直居中显示在屏幕上。如果要更改此设置(如果要强制视图朝向屏幕的顶部/底部/左侧/右侧)，则应使用 &lt;code&gt;Spacer&lt;/code&gt; 视图。&lt;/p&gt;

&lt;h3 id=&#34;1-不使用-spacer&#34;&gt;1. 不使用 Spacer&lt;/h3&gt;

&lt;p&gt;例如，我们将一个文本视图放置在 VStack 内，这意味着它将垂直居中:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        
        // 1. 不使用 Spacer
        VStack {
            Text(&amp;quot;Hello World&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.4_default_without_spacer.png&#34; alt=&#34;2.4_default_without_spacer&#34; title=&#34;Without spacer view&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-将文本视图推到父视图的顶部&#34;&gt;2. 将文本视图推到父视图的顶部&lt;/h3&gt;

&lt;p&gt;要将文本视图推到父视图的顶部，我们将在其下面放置一个 &lt;code&gt;Spacer&lt;/code&gt; 视图，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 2. 使用 Spacer 将文本视图推到父视图顶部
        VStack {
            Text(&amp;quot;Hello World&amp;quot;)
            Spacer()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.4_push_text_to_top.png&#34; alt=&#34;2.4_push_text_to_top&#34; title=&#34;Push text view to super view&#39;s top using spacer view&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-在-hstack-中使用-spacer&#34;&gt;3. 在 HStack 中使用 Spacer&lt;/h3&gt;

&lt;p&gt;如果我们希望在 HStack 的前后边缘上有两段文字，可以使用这样的分隔符:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 3. 在 HStack 中使用 Spacer
        HStack {
            Text(&amp;quot;Hello&amp;quot;)
            Spacer()
            Text(&amp;quot;World&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.4_using_spacer_in_hstack.png&#34; alt=&#34;2.4_using_spacer_in_hstack&#34; title=&#34;Using spacer view in HStack, to seperate two text views&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-多个-spacer-分割空间&#34;&gt;4. 多个 Spacer 分割空间&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Spacer&lt;/code&gt; 会自动分割所有剩余空间，这意味着如果您使用多个 Spacer，则可以按不同数量分割空间。&lt;/p&gt;

&lt;p&gt;例如，这将通过在其上放置一个空格，在其后放置两个空格，将文本视图置于其父视图的三分之一以下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 4. 多个 Spacer 分割空间
        VStack {
            Spacer()
            Text(&amp;quot;Hello world.&amp;quot;)
            Spacer()
            Spacer()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.4_using_multi_spacer.png&#34; alt=&#34;2.4_using_multi_spacer&#34; title=&#34;Using multi spacer view to divide up all remaining space&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果为 &lt;code&gt;Spacer&lt;/code&gt; 提供一定范围的值，例如使用 &lt;code&gt;.frame（minHeight: 50,maxHeight:500）&lt;/code&gt;，则它将自动占用尽可能多的空间，直到您设置的最大值。 以这种方式添加一些灵活性通常是一个好主意，这样我们的用户界面就可以更轻松地跨设备扩展。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.13_如何将视图放到安全区域之外</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.13_%E5%A6%82%E4%BD%95%E5%B0%86%E8%A7%86%E5%9B%BE%E6%94%BE%E5%88%B0%E5%AE%89%E5%85%A8%E5%8C%BA%E5%9F%9F%E4%B9%8B%E5%A4%96/</link>
      <pubDate>Fri, 26 Jul 2019 22:12:50 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.13_%E5%A6%82%E4%BD%95%E5%B0%86%E8%A7%86%E5%9B%BE%E6%94%BE%E5%88%B0%E5%AE%89%E5%85%A8%E5%8C%BA%E5%9F%9F%E4%B9%8B%E5%A4%96/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;默认情况下，我们的 SwiftUI 视图将主要位于安全区域内 - 它将会到达屏幕底部，但不会靠近设备顶部的任何凹口。
如果我们想改变它 - 想让视图真正全屏，即使这意味着被一个缺口或其他硬件切口部分遮挡 - 那么我们应该使用 &lt;code&gt;edgesIgnoringSafeArea()&lt;/code&gt; 修饰符。
例如，这会创建一个红色文本视图，要求填充所有可用空间，然后将其设置为忽略任何安全区域，以使其真正边缘化。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // edgesIgnoringSafeArea
        Text(&amp;quot;Hello World&amp;quot;)
            .frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity)
            .background(Color.red)
            .edgesIgnoringSafeArea(.all)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/2.13_edgesIgnoringSafeArea.png&#34; alt=&#34;2.13_edgesIgnoringSafeArea&#34; title=&#34;edgesIgnoringSafeArea all&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.10_如何使用size_classes创建不同的布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.10_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8size_classes%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E5%B8%83%E5%B1%80/</link>
      <pubDate>Fri, 26 Jul 2019 16:52:17 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.10_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8size_classes%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;!-- more --&gt;

&lt;p&gt;SwiftUI 通过在环境中暴露 &lt;em&gt;size classes&lt;/em&gt; 来原生支持它。如果要使用它，我们首先需要创建一个 &lt;code&gt;@Environment&lt;/code&gt; 对象来存储其值，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Environment(\.horizontalSizeClass) var horizontalSizeClass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们可以根据需要检查该属性的值，查找 &lt;code&gt;.compact&lt;/code&gt; 或 &lt;code&gt;.regular&lt;/code&gt;，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if horizontalSizeClass == .compact {
    return Text(&amp;quot;Compact&amp;quot;)
} else {
    return Text(&amp;quot;Regular&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将所有代码组合在一起，可以创建这样的视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    @Environment(\.horizontalSizeClass) var horizontalSizeClass
    
    var body: some View {
        if horizontalSizeClass == .compact {
            return Text(&amp;quot;Compact&amp;quot;)
        } else {
            return Text(&amp;quot;Regular&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:&lt;/p&gt;

&lt;p&gt;(1) 正向竖屏
&lt;img src=&#34;img/2.10_size_classes_compact.png&#34; alt=&#34;2.10_size_classes_compact&#34; title=&#34;Text - Compact&#34; /&gt;
(2) 横屏 - 刘海在右侧
&lt;img src=&#34;img/2.10_size_classes_regular01.png&#34; alt=&#34;2.10_size_classes_regular01&#34; title=&#34;Text - Regular01&#34; /&gt;
(3) 横屏 - 刘海在左侧
&lt;img src=&#34;img/2.10_size_classes_regular02.png&#34; alt=&#34;2.10_size_classes_regular02&#34; title=&#34;Text - Regular02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SizeClass 是通过将 VStack 或 HStack 用于内容来使用户界面智能地适应可用空间的好方法。 例如，如果我们有很多空间，则可以水平放置东西，但在空间有限时切换到垂直布局。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.9_如何使用ForEach在循环中创建视图</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8foreach%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Fri, 26 Jul 2019 00:21:40 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.9_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8foreach%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE/</guid>
      <description>

&lt;p&gt;通常，我们会发现，我们需要遍历一个序列来创建视图，而在 SwiftUI 中，这是通过 &lt;code&gt;ForEach&lt;/code&gt; 来完成的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;:
我们很容易一看到 &lt;em&gt;ForEach&lt;/em&gt; 就认为它与 Swift 序列中的 &lt;em&gt;forEach()&lt;/em&gt; 方法相同，但事实并非如此。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SwiftUI 中的 &lt;code&gt;ForEach&lt;/code&gt; 本身是一个视图结构，这就意味着我们可以根据需要直接从视图 &lt;em&gt;Body&lt;/em&gt; 返回它。&lt;/li&gt;
&lt;li&gt;我们为它提供一系列项目，可能还需要告诉 SwiftUI 它如何唯一地标识每个项目，以便 SwiftUI 知道如何在值更改时更新它们。&lt;/li&gt;
&lt;li&gt;我们还传递一个要运行的闭包，来为循环中的每个项目创建一个视图。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于范围内的简单循环，我们可以将范围直接传递到 ForEach 中，并告诉 Swift 将每个数字用作项目的唯一标识符。&lt;/p&gt;

&lt;h3 id=&#34;1-循环-1-10-创建文本视图&#34;&gt;1. 循环 1&amp;hellip;10 创建文本视图&lt;/h3&gt;

&lt;p&gt;例如，这从10减少到1，然后在最后添加一条消息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 1. 循环 1...10 创建文本视图
        VStack(alignment: .leading) {
            ForEach((1...10).reversed(), id: \.self, content: {
                Text(&amp;quot;\($0)...&amp;quot;)
            })
            
            Text(&amp;quot;Ready or not, here I come!&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.9_foreach_create_text_views.png&#34; alt=&#34;2.9_foreach_create_text_views&#34; title=&#34;Create text views using ForEach&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.id(: \.self)&lt;/code&gt; 部分是必需的，这样 SwiftUI 可以唯一地标识数组中的每个元素——这意味着，如果添加或删除一个项，SwiftUI 可以确切地知道是哪一个。&lt;/p&gt;

&lt;h3 id=&#34;2-foreach-colors&#34;&gt;2. ForEach colors&lt;/h3&gt;

&lt;p&gt;我们可以使用这种方法来创建任何类型的循环。 例如，此代码创建一个由三种颜色组成的数组，将它们全部循环，并使用每种颜色名称和颜色值创建文本视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    
    let colors: [Color] = [.red, .green, .blue]
    
    var body: some View {
        // 2. ForEach colors
        VStack {
            ForEach(colors, id: \.self) { color in
                Text(color.description.capitalized)
                    .padding()
                    .background(color)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.9_foreach_colors_array.png&#34; alt=&#34;2.9_foreach_colors_array&#34; title=&#34;foreach colors&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;\.self&lt;/code&gt; 告诉 Swift，每个项目都使用其自己的值进行唯一标识。 因此，如果我们有数组 [1、2、3] 并通过 &lt;code&gt;\.self&lt;/code&gt; 标识每个值，则意味着第一项具有标识符1，第二个2 和 第三个3。&lt;/p&gt;

&lt;h3 id=&#34;3-foreach-custom-type&#34;&gt;3. ForEach custom type&lt;/h3&gt;

&lt;p&gt;如果数组中有自定义类型，则应使用  &lt;code&gt;.id:&lt;/code&gt; 类型内的任何属性对其进行唯一标识。
例如，这是一个存储测试结果的结构，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Result {
    var id = UUID()
    var score: Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它有一个带有 &lt;code&gt;UUID&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt; 属性，这意味着它保证是唯一的 - 对于我们的目的而言是完美的。 如果我们要遍历结果数组，创建一个文本视图以显示 &lt;code&gt;VStack&lt;/code&gt; 中每个结果，那么我们可以使用以下方法:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {

    let results = [Result(score: 8), Result(score: 5), Result(score: 10)]
    
    var body: some View {
        // 3. ForEach custom type
        VStack {
            ForEach(results, id: \.id, content: { result in
                Text(&amp;quot;Result: \(result.score)&amp;quot;)
            })
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.9_foreach_custom_type.png&#34; alt=&#34;2.9_foreach_custom_type&#34; title=&#34;ForEach custom type&#34; /&gt;
这告诉 SwiftUI 它可以通过查看它们的 &lt;code&gt;id&lt;/code&gt; 属性来区分 &lt;code&gt;ForEach&lt;/code&gt; 中的视图。&lt;/p&gt;

&lt;p&gt;或者，如果使 Result 符合 &lt;code&gt;Identifiable&lt;/code&gt; 协议，则只需编写 &lt;code&gt;ForEach(results)&lt;/code&gt;。 遵守该协议意味着添加一个 id 属性，该属性唯一地标识每个对象，在我们的情况下，我们已经拥有了它。 因此，此代码实现了相同的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Result: Identifiable {
    var id = UUID()
    var score: Int
}

struct ContentView: View {
    let results = [Result(score: 8), Result(score: 5), Result(score: 10)]

    var body: some View {
        VStack {
            ForEach(results) { result in
                Text(&amp;quot;Result: \(result.score)&amp;quot;)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2.8_如何返回不同的视图类型</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.8_%E5%A6%82%E4%BD%95%E8%BF%94%E5%9B%9E%E4%B8%8D%E5%90%8C%E7%9A%84%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 25 Jul 2019 13:47:21 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.8_%E5%A6%82%E4%BD%95%E8%BF%94%E5%9B%9E%E4%B8%8D%E5%90%8C%E7%9A%84%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%9E%8B/</guid>
      <description>

&lt;p&gt;当我们从视图的 body 返回 &lt;code&gt;some View&lt;/code&gt; 的时候，Swift 会理解为这意味着我们拥有一个特定的返回类型。&lt;/p&gt;

&lt;p&gt;例如: 如果我们想掷硬币并显示 &amp;ldquo;你赢了!&amp;ldquo;的图像，或是一些文字，表示 &amp;ldquo;下次运气更好&amp;rdquo;， 那么我们不能这样写:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    if Bool.random() {
        Image(&amp;quot;example-image&amp;quot;)
    } else {
        Text(&amp;quot;Better luck next time&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码会报错:
&lt;img src=&#34;img/2.8_error_return_view_type.png&#34; alt=&#34;2.8_error_return_view_type&#34; title=&#34;Compilation error&#34; /&gt;
因为它可能返回 &lt;em&gt;Image&lt;/em&gt; 或者 &lt;em&gt;Text&lt;/em&gt; ，这是不允许的 &amp;ndash;  我们&lt;code&gt;必须精确返回一种类型&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;有两种方法可以解决这个问题。&lt;/p&gt;

&lt;h3 id=&#34;1-group&#34;&gt;1. Group&lt;/h3&gt;

&lt;p&gt;第一种方法是将输出包装在一个 &lt;code&gt;group&lt;/code&gt; 中，这样无论我们发送图像视图还是文本视图，它们都将返回到一个 &lt;code&gt;group&lt;/code&gt; 中:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Group {
        if Bool.random() {
            Image(&amp;quot;example-image&amp;quot;)
        } else {
            Text(&amp;quot;Better luck next time&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/2.8_return_view_in_group.png&#34; alt=&#34;2.8_return_view_in_group&#34; title=&#34;Return an image or a text in a group.&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-anyview&#34;&gt;2. AnyView&lt;/h3&gt;

&lt;p&gt;第二种方法，SwiftUI 提供了一个名为 &lt;code&gt;AnyView&lt;/code&gt; 的类型擦除包装器，我们可以返回这种类型:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: AnyView {
    if Bool.random() {
        return AnyView(Image(&amp;quot;example-image&amp;quot;))
    } else {
        return AnyView(Text(&amp;quot;Better luck next time&amp;quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.8_return_view_in_anyView.png&#34; alt=&#34;2.8_return_view_in_anyView.png&#34; title=&#34;Return an image or a text in an anyView.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果你还没有听说过这个概念，它会强制让 Swift 忘记 &lt;code&gt;AnyView&lt;/code&gt; 中包含的特定类型，让它们看起来像是一样的东西。但这会降低性能，所以请不要经常使用它。
尽管 &lt;code&gt;Group&lt;/code&gt; 和 &lt;code&gt;AnyView&lt;/code&gt; 都为我们实现了相同的布局效果，但通常最好使用 &lt;code&gt;Group&lt;/code&gt;，因为它对 SwiftUI 效率更高。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.6_如何使用ZStack将视图叠加在一起</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.6_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8zstack%E5%B0%86%E8%A7%86%E5%9B%BE%E5%8F%A0%E5%8A%A0%E5%9C%A8%E4%B8%80%E8%B5%B7/</link>
      <pubDate>Thu, 25 Jul 2019 13:26:52 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.6_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8zstack%E5%B0%86%E8%A7%86%E5%9B%BE%E5%8F%A0%E5%8A%A0%E5%9C%A8%E4%B8%80%E8%B5%B7/</guid>
      <description>

&lt;p&gt;SwiftUI 有一个专用的 &lt;em&gt;stack&lt;/em&gt; 类型，用于创建重叠内容，例如，如果我们想在图片上放置一些文本，它就很有用。它被称为 &lt;code&gt;ZStack&lt;/code&gt;，其工作原理与其他两种 &lt;em&gt;stack&lt;/em&gt; 类型相同。&lt;/p&gt;

&lt;h3 id=&#34;1-在文本下面放置图片&#34;&gt;1. 在文本下面放置图片&lt;/h3&gt;

&lt;p&gt;例如: 我们可以在如下文本下面放置一个大图像:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    ZStack() {
        Image(&amp;quot;example-image&amp;quot;)
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .font(.largeTitle)
            .background(Color.black)
            .foregroundColor(.white)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.6_zstack_image_text.png&#34; alt=&#34;2.6_zstack_image_text&#34; title=&#34;Set zstack with a image and a text, image is below text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-对齐&#34;&gt;2. 对齐&lt;/h3&gt;

&lt;p&gt;与其它 &lt;em&gt;stack&lt;/em&gt; 类型一样，&lt;code&gt;ZStack&lt;/code&gt; 也可以设置对齐方式，这样它就不会总是将事物置于自身的中心位置:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    ZStack(alignment: .leading) {
        Image(&amp;quot;example-image&amp;quot;)
            .resizable()
            .aspectRatio(contentMode: .fit)
        Text(&amp;quot;Hello SwiftUI&amp;quot;)
            .font(.largeTitle)
            .background(Color.black)
            .foregroundColor(.white)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.6_zstack_alignment_leading.png&#34; alt=&#34;2.6_zstack_alignment_leading&#34; title=&#34;Set zstack&#39;s alignment as .leading&#34; /&gt;
但是，它没有 &lt;em&gt;spacing&lt;/em&gt; 属性，因为它实际上没有意义。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.3_如何使用padding控制单个视图周围的间距</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.3_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8padding%E6%8E%A7%E5%88%B6%E5%8D%95%E4%B8%AA%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%9A%84%E9%97%B4%E8%B7%9D/</link>
      <pubDate>Thu, 25 Jul 2019 11:39:45 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.3_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8padding%E6%8E%A7%E5%88%B6%E5%8D%95%E4%B8%AA%E8%A7%86%E5%9B%BE%E5%91%A8%E5%9B%B4%E7%9A%84%E9%97%B4%E8%B7%9D/</guid>
      <description>

&lt;p&gt;SwiftUI 允许我们使用 &lt;code&gt;padding()&lt;/code&gt; 修饰符在视图周围设置单独的填充。&lt;/p&gt;

&lt;h3 id=&#34;1-系统默认-padding&#34;&gt;1. 系统默认 padding&lt;/h3&gt;

&lt;p&gt;如果在不传参数的情况下使用 &lt;em&gt;padding()&lt;/em&gt; ，我们将在视图的四周获得系统默认填充，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            // 1. 系统默认 padding
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
                .padding()
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.3_padding_system_default.png&#34; alt=&#34;2.3_padding_system_default&#34; title=&#34;Set padding with system default&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 这里默认设置了视图四周的填充。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;2-只设置一侧系统默认-padding&#34;&gt;2. 只设置一侧系统默认 padding&lt;/h3&gt;

&lt;p&gt;我们也可以自定义要应用的 填充 和 位置。因此，我们只希望将系统填充应用于一侧:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {  
            // 2. 只设置一侧填充
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
                .padding(.bottom)
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.3_padding_system_bottom.png&#34; alt=&#34;2.3_padding_system_bottom&#34; title=&#34;Set bottom padding with system default&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 这里只设置了底部填充，与上面的例子不同。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-用具体数值来设置-padding&#34;&gt;3. 用具体数值来设置 padding&lt;/h3&gt;

&lt;p&gt;我们可能希望控制对所有边应用了多少填充:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {  
            // 2. 只设置一侧填充
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
                .padding(100)
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.3_padding_100.png&#34; alt=&#34;2.3_padding_100&#34; title=&#34;Set padding as 100&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-在视图一侧添加特定数量的填充&#34;&gt;4. 在视图一侧添加特定数量的填充&lt;/h3&gt;

&lt;p&gt;我们也可以将这两者结合起来，在视图的一侧添加特定数量的填充：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
                .padding(.bottom, 100)
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.3_padding_bottom_100.png&#34; alt=&#34;2.3_padding_bottom_100&#34; title=&#34;Set bottom padding as 100&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.2_如何通过alignment和spacing自定义stack布局</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.2_%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87alignment%E5%92%8Cspacing%E8%87%AA%E5%AE%9A%E4%B9%89stack%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 25 Jul 2019 10:54:52 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.2_%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87alignment%E5%92%8Cspacing%E8%87%AA%E5%AE%9A%E4%B9%89stack%E5%B8%83%E5%B1%80/</guid>
      <description>

&lt;h3 id=&#34;1-spacing&#34;&gt;1. &lt;code&gt;spacing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;我们可以通过在 SwiftUI stacks 的构造方法中填一个值来设置间距，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 1. 设置 spacing
        VStack(spacing: 50) {
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.2_stack_spacing.png&#34; alt=&#34;2.2_stack_spacing&#34; title=&#34;Set a spacing for stack&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-divider&#34;&gt;2. &lt;code&gt;Divider&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;我们可以在项目之间创建分隔线，以便 SwiftUI 在 &lt;em&gt;stack&lt;/em&gt; 中的每个项目之间进行较小的视觉区分，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 2. 设置 divider
        VStack {
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
            Divider()
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.2_stack_divider.png&#34; alt=&#34;2.2_stack_divider&#34; title=&#34;Set a divider for stack&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-alignment&#34;&gt;3. &lt;code&gt;alignment&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;默认情况下，&lt;em&gt;stacks&lt;/em&gt; 中的项目居中对齐。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 &lt;em&gt;HStack&lt;/em&gt; 中: 项目在中间垂直对齐，因此如果有两个不同高度的文本视图，它们都将与垂直中心对齐。&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;VStack&lt;/em&gt; 中: 项目在中间水平对齐，因此如果有两个长度不同的文本视图，它们都将与水平中心对齐。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要调整这种情况，请在创建 &lt;em&gt;stack&lt;/em&gt; 时按以下方式传递一个 &lt;em&gt;alignment&lt;/em&gt; 参数:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 3. 设置 alignment
        VStack(alignment: .leading) {
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.2_stack_alignment_leading.png&#34; alt=&#34;2.2_stack_alignment_leading&#34; title=&#34;Set alignment to .leading&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这将使 &lt;code&gt;Hello SwiftUI&lt;/code&gt; 和 &lt;code&gt;Hello M X&lt;/code&gt; 左对齐，但它们最终将位于屏幕的中间，因为 stack 只占用所需的空间。&lt;/p&gt;

&lt;h3 id=&#34;4-同时设置-alignment-和-spacing&#34;&gt;4.同时设置 &lt;code&gt;alignment&lt;/code&gt; 和 &lt;code&gt;spacing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;我们可以同时使用 &lt;em&gt;alignment&lt;/em&gt; 和 &lt;em&gt;spacing&lt;/em&gt; ，如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        // 4. 同时设置 alignment 和 spacing
        VStack(alignment: .leading, spacing: 20) {
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
            Text(&amp;quot;Hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果:
&lt;img src=&#34;img/2.2_stack_alignment_spacing.png&#34; alt=&#34;2.2_stack_alignment_spacing&#34; title=&#34;Using alignment and spacing in stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这将使两个文本视图水平对齐到 &lt;code&gt;leading&lt;/code&gt;（对于从左到右的语言是左对齐），并在它们之间放置20个点的垂直间距。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.1_如何使用VStack和HStack创建stacks</title>
      <link>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.1_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vstack%E5%92%8Chstack%E5%88%9B%E5%BB%BAstacks/</link>
      <pubDate>Thu, 25 Jul 2019 10:10:50 +0800</pubDate>
      
      <guid>https://coderxdlee.github.io/post/swiftui/2-view_layout/2.1_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vstack%E5%92%8Chstack%E5%88%9B%E5%BB%BAstacks/</guid>
      <description>

&lt;p&gt;SwiftUI 的内容视图(content views)必须返回一个视图，即我们希望它们显示的视图。当我们想要一次性在屏幕上显示多个视图时，我们需要告诉 SwiftUI 如何排列它们，这就是 &lt;code&gt;堆栈（stacks）&lt;/code&gt;的来源。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;堆栈（Stacks）&lt;/code&gt; 相当于 UIKit 中的 &lt;strong&gt;UIStackView&lt;/strong&gt; 。有三种形式:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;水平（HStack）&lt;/li&gt;
&lt;li&gt;垂直（VStack）&lt;/li&gt;
&lt;li&gt;基于深度（ZStack）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们想放置子视图以便它们重叠时可以使用后者。&lt;/p&gt;

&lt;h3 id=&#34;1-vstack&#34;&gt;1. VStack&lt;/h3&gt;

&lt;p&gt;让我们从一些简单的事情开始，先创建一个文本视图:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            // 1. 创建一个文本视图
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.1_single_text.png&#34; alt=&#34;2.1_single_text&#34; title=&#34;A single text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们想在下面再放一个文本视图，我们不能只写:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {
    Text(&amp;quot;Hello SwiftUI&amp;quot;)
    Text(&amp;quot;Hello M X&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的话，编译器会直接报错。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;记住，我们只能返回一个视图，否则代码就不会工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么怎么办呢？我们需要将其放置在 &lt;code&gt;VStack&lt;/code&gt; 中，以便将文本视图放置在彼此上方:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        VStack {
            // 2. 创建两个文本视图
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
            Text(&amp;quot;hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.1_two_text_in_vstack.png&#34; alt=&#34;2.1_two_text_in_vstack&#34; title=&#34;Two texts in VStack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;您会注意到: &lt;code&gt;VStack&lt;/code&gt; 位于屏幕的中心，标签也居中，并且它们之间有一些自动间隔。&lt;/p&gt;

&lt;h3 id=&#34;2-hstack&#34;&gt;2. HStack&lt;/h3&gt;

&lt;p&gt;如果我们希望文本视图并排水平放置，请使用如下方式将 &lt;code&gt;VStack&lt;/code&gt; 替换为 &lt;code&gt;HStack&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {
    var body: some View {
        HStack {
            // 3. 水平放置
            Text(&amp;quot;Hello SwiftUI&amp;quot;)
                .background(Color.red)
            Text(&amp;quot;hello M X&amp;quot;)
                .background(Color.blue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果预览:
&lt;img src=&#34;img/2.1_two_text_in_hstack.png&#34; alt=&#34;2.1_two_text_in_hstack&#34; title=&#34;Two texts in HStack&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
